{"version":3,"sources":["webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./node_modules/@material-ui/icons/PlayForWork.js","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx","webpack:///./source/src/app/components/Shared/ScopeValidation.jsx"],"names":["definition","number","Joi","integer","url","string","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","constructor","super","this","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","then","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","body","Subscriptions","put_subscriptions__subscriptionId_","useStyles","makeStyles","theme","appContent","margin","spacing","button","color","palette","getContrastText","primary","main","genericDisplayDialog","props","handleClick","heading","caption","buttonText","classes","className","type","dialogContainer","variant","component","gutterBottom","resourcePath","resourcePaths","APPLICATIONS","resourceMethod","resourceMethods","POST","onClick","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","intl","useIntl","open","setOpen","React","useState","handleClose","handleChange","event","Button","startIcon","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","direction","item","xs","TextField","name","formatMessage","e","fullWidth","disabled","FormControl","FormHelperText","DialogActions","ScopeValidation","APPLICATION_GENERATE_KEYS","Typography","propTypes","PropTypes","shape","isRequired","func","defaultProps","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","TableRow","TableCell","scope","leftCol","Box","maxWidth","multiple","root","removeHelperPadding","select","helperText","tooltip","values","map","MenuItem","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","notFound","instanceOf","any","bool","injectIntl","withStyles","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","marginLeft","quotaHelp","position","checkboxWrapper","display","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","keyManagerConfig","validating","updateKeyRequest","keyRequest","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","callBackHasErrors","includes","Validation","validate","error","field","newRequest","cloneDeep","newGrantTypes","keyManager","filter","clonedAdditionalProperties","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","propPrefix","keyType","toLowerCase","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","placeholder","length","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","code","background","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","Fragment","ViewKeys","Component","accessTokenRequest","setState","that","elementName","data","state","preventDefault","showToken","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert1","Alert","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","componentDidMount","getKeys","componentDidUpdate","prevProps","render","fullScreen","tokenType","summary","Loading","csCkKeys","size","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","viewKeyAndSecret","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","paper","marginTop","marginRight","keyState","states","REJECTED","noKeysRoot","backgroundImage","app","context","custom","overviewPage","keysBackground","height","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","supportedGrantTypes","TabPanel","children","index","other","role","hidden","p","node","StyledTabs","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","StyledTab","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","push","selectdKM","selectdKMGrants","str","replace","txt","charAt","toUpperCase","substr","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","updateSubscriptionData","setValidating","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","validatingState","mb","keyTitle","toTitleCase","InlineMessage","username","AuthManager","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","indicatorColor","textColor","handleTabChange","keymanager","displayName","tabPanel","subTitle","ml","m","enableTokenHashing","generateWrapper","warningIcon","kmName","keyConfigWrapper","muiFormGroupRoot","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","SINGLE_SUBSCRIPTION","DELETE","classNames","activeLink","colSpan","selectedWrapper","textAlign","A200","withTheme","Credentials","expanded","subscriptionRequest","throttlingPolicyList","isSubscribing","api","applicationsAvailable","newSubscriptionRequest","tiers","tierName","apiType","Api","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","md","lg","handleExpandClick","titleSub","style","isSubscriptionAvailable","pointerEvents","addLinkWrapper","Paper","elevation","descWrapper","lifeCycleStatus","GenericDisplayDialog","goToWizard","generateCredentialWrapper","SUBSCRIPTIONS","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","ApiContext","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","border","borderRadius","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","SINGLE_APPLICATION","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","PUT","GET","hasScope","hasScopes","haveScope"],"mappings":"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","file":"APICredentials.eb5b999e993619b31bb1.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n                body: subscriptionData \n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(payload, { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {config.label}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n                    {config.type === 'select' && config.multiple === false ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            select\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        >\n                            {config.values.map(key => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    ) : (config.type === 'select' && config.multiple === true) ? (\n                        <>\n                            <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                <Select\n                                    labelId=\"multi-select-label\"\n                                    id=\"multi-select-outlined\"\n                                    margin='dense'\n                                    displayEmpty\n                                    name={config.name}\n                                    multiple\n                                    value={selectedValue}\n                                    onChange={e => handleAppRequestChange(e)}\n                                    input={<Input id='multi-select-outlined' />}\n                                    renderValue={selected => (\n                                        <div className={classes.chips}>\n                                            {selected.map(value => (\n                                                <Chip key={value} label={value} className={classes.chip} />\n                                            ))}\n                                        </div>\n                                    )}\n                                    helperText={\n                                        <Typography variant='caption'>\n                                            {config.tooltip}\n                                        </Typography>\n                                    }\n                                    label={config.label}\n                                >\n                                    {config.values.map(key => (\n                                        <MenuItem key={key} value={key}>\n                                            <Checkbox checked={selectedValue.indexOf(key) > -1} />\n                                            <ListItemText primary={key} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n\n                            <Typography variant='caption'>\n                                {config.tooltip}\n                            </Typography>\n                        </>\n                    ) : (config.type === 'input') ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        />\n                    ) : (\n                                    <TextField\n                                        classes={{\n                                            root: classes.removeHelperPadding,\n                                        }}\n                                        fullWidth\n                                        id={config.name}\n                                        label={config.label}\n                                        value={selectedValue}\n                                        name={config.name}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {config.tooltip}\n                                            </Typography>\n                                        }\n                                        margin='dense'\n                                        variant='outlined'\n                                        disabled={!isUserOwner}\n                                    />\n                                )}\n                            </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        }\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const intl = useIntl();\n    let {\n        classes, notFound, isUserOwner, keyManagerConfig, validating, updateKeyRequest, keyRequest,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    let {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = () => {\n        if (!(selectedGrantTypes.includes('implicit') || selectedGrantTypes.includes('authorization_code'))) {\n            return false;\n        }\n        if (callbackUrl === '' && validating) {\n            return intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text'\n            });\n        } else if (Validation.url.validate(callbackUrl).error && validating) {\n            return intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text'\n            });\n        } else {\n            return false;\n        }\n    }\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        //newRequest.serverSupportedGrantTypes = availableGrantTypes;\n        //newRequest.selectedGrantTypes = availableGrantTypes;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter(item => item !== currentTarget.id);\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                let clonedAdditionalProperties = newRequest.additionalProperties;\n                clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    }\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        const isPreviousValueSet =  !!(additionalProperties && additionalProperties[config.name]);\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '' ) {\n            defaultValue = [];\n        }\n        return  isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    }\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    const propPrefix = keyRequest.keyType.toLowerCase();\n    tokenEndpoint = additionalProperties[`${propPrefix}_token_endpoint`] || tokenEndpoint;\n    revokeEndpoint = additionalProperties[`${propPrefix}_revoke_endpoint`] || revokeEndpoint;\n\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (<TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Token Endpoint'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                />\n                            </TableCell>\n                            <TableCell>\n                                {tokenEndpoint}\n                                <Tooltip\n                                    title={\n                                        urlCopied\n                                            ? intl.formatMessage({\n                                                defaultMessage: 'Copied',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                            })\n                                            : intl.formatMessage({\n                                                defaultMessage: 'Copy to clipboard',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                            })\n                                    }\n                                    placement='right'\n                                    className={classes.iconStyle}\n                                >\n                                    <CopyToClipboard\n                                        text={tokenEndpoint}\n                                        onCopy={onCopy}\n                                    >\n                                        <IconButton aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}>\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </CopyToClipboard>\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>)}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (<TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Revoke Endpoint'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                />\n                            </TableCell>\n                            <TableCell>\n                                {revokeEndpoint}\n                                <Tooltip\n                                    title={\n                                        urlCopied\n                                            ? intl.formatMessage({\n                                                defaultMessage: 'Copied',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                            })\n                                            : intl.formatMessage({\n                                                defaultMessage: 'Copy to clipboard',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                            })\n                                    }\n                                    placement='right'\n                                    className={classes.iconStyle}\n                                >\n                                    <CopyToClipboard\n                                        text={revokeEndpoint}\n                                        onCopy={onCopy}\n                                    >\n                                        <IconButton aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}>\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </CopyToClipboard>\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>)}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (<TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='User Info Endpoint'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                />\n                            </TableCell>\n                            <TableCell>\n                                {userInfoEndpoint}\n                                <Tooltip\n                                    title={\n                                        urlCopied\n                                            ? intl.formatMessage({\n                                                defaultMessage: 'Copied',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                            })\n                                            : intl.formatMessage({\n                                                defaultMessage: 'Copy to clipboard',\n                                                id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                            })\n                                    }\n                                    placement='right'\n                                    className={classes.iconStyle}\n                                >\n                                    <CopyToClipboard\n                                        text={userInfoEndpoint}\n                                        onCopy={onCopy}\n                                    >\n                                        <IconButton aria-label='Copy to clipboard'\n                                            classes={{ root: classes.iconButton }}>\n                                            <Icon color='secondary'>file_copy</Icon>\n                                        </IconButton>\n                                    </CopyToClipboard>\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>)}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types' />\n\n                            </TableCell>\n                            <TableCell>\n                                    <div className={classes.checkboxWrapperColumn}>\n                                        {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                            const value = grantTypeDisplayListMap[key];\n                                            return (\n                                                <FormControlLabel\n                                                    control={(\n                                                        <Checkbox\n                                                            id={key}\n                                                            checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                            onChange={e => handleChange('grantType', e)}\n                                                            value={value}\n                                                            disabled={!isUserOwner}\n                                                            color='primary'\n                                                        />\n                                                    )}\n                                                    label={value}\n                                                    key={key}\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n                                        \n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={<FormattedMessage\n                                            defaultMessage='Callback URL'\n                                            id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                        />}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={e => handleChange('callbackUrl', e)}\n                                        helperText={callBackHasErrors() || <FormattedMessage\n                                            defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                            id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                        />}\n                                        variant='outlined'\n                                        disabled={!isUserOwner ||\n                                            (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))\n                                        }\n                                        error={callBackHasErrors()}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map(config => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyType,\n        keyManagerConfig,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    const { additionalProperties } = keyManagerConfig;\n    let { tokenEndpoint } = keyManagerConfig;\n    const propPrefix = keyType.toLowerCase();\n    tokenEndpoint = additionalProperties[`${propPrefix}_token_endpoint`] || tokenEndpoint;\n\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip title={tokenCopied ? 'Copied' : 'Copy to clipboard'} placement='right'>\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Alert1 from 'AppComponents/Shared/Alert';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                     Alert1.error(error.description ||\n                         intl.formatMessage({\n                             id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                              defaultMessage: 'Error occurred when generating Access Token',\n                         })\n                     );\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const { classes, intl, selectedApp: { hashEnabled }, keyType } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={secretCopied ? 'Copied' : 'Copy to clipboard'}\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={classes.button}\n                                    onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                    disabled={!isUserOwner}\n                                >\n                                    <FormattedMessage\n                                        defaultMessage='Regenerate Consumer Secret'\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                    />\n                                </Button>\n                            )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || isKeyJWT) && selectedGrantTypes.includes('client_credentials')}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl \n                                            keys={{ consumerKey, consumerSecret }} \n                                            keyType={keyType} \n                                            keyManagerConfig={keyManagerConfig} \n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button onClick={this.generateAccessToken} color='primary' disabled={isUpdating}>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button onClick={this.handleClose} color='primary' autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {keyManagerConfig.enableTokenGeneration &&\n                                    selectedGrantTypes.find(a => a.includes('client_credentials')) &&\n                                    (<Button\n                                        variant='outlined'\n                                        size='small'\n                                        color='primary'\n                                        className={classes.margin}\n                                        onClick={this.handleClickOpen}\n                                        disabled={!selectedGrantTypes.includes('client_credentials')}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                            defaultMessage='Generate Access Token'\n                                        />\n                                    </Button>)}\n                                <Button\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {!selectedGrantTypes.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& input:disabled': {\n            backgroundColor: '#f8f8f8',\n            color: '#9d9d9d',\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        }\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        }\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if(nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach(confItem => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find(x => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes || availableGrantTypes.filter(type => (type !== 'authorization_code' && type !== 'implicit')),\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ keyRequest: newRequest, selectedTab: newSelectedTab });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: availableGrantTypes.filter(type => (type !== 'authorization_code' && type !== 'implicit')),\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM)\n                },\n                selectedTab: newSelectedTab,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = !!responseKeyManagerList.find(x => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find(x => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({ keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab });\n                    } else {\n                        const selectdKMGrants = selectdKM.availableGrantTypes || [];\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes: selectdKMGrants.filter(type => (type !== 'authorization_code' && type !== 'implicit')),\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code')) && keyRequest.callbackUrl === '') {\n            Alert.error(intl.formatMessage({\n                id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n            }));\n            this.setValidating(true);\n            return;\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, selectedTab,\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys, isKeyJWT });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                }\n                \n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        this.setState({ isLoading: true });\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter(item => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n    setValidating(validatingState) {\n        this.setState({ validating: validatingState });\n    }\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            function (txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }\n        );\n    };\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled },\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating,\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return <div className={classes.root}>\n                <Box mb={1}>\n                    <Typography variant='h5' className={classes.keyTitle}>\n                        {this.toTitleCase(keyType)}\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                            defaultMessage=' OAuth2 Keys'\n                        />\n                    </Typography>\n                </Box>\n                <InlineMessage type='info' className={classes.dialogContainer}>\n                    <Typography variant='h5' component='h3'>\n                        <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km' defaultMessage='No Key Managers' />\n                    </Typography>\n                    <Typography component='p'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                            defaultMessage='No Key Managers active to generate keys.'\n                        />\n                    </Typography>\n                </InlineMessage>\n            </div>\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (<StyledTabs\n                    value={selectedTab}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    onChange={this.handleTabChange}\n                    aria-label='key manager tabs'\n                >\n                    {keyManagers.map((keymanager) => (\n                        <StyledTab label={keymanager.displayName || keymanager.name} value={keymanager.name} disabled={!keymanager.enabled} />\n                    ))}\n                </StyledTabs>)}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map(keymanager => (\n                        <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                            <Box display='flex' flexDirection='row'>\n                                <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                    <FormattedMessage\n                                        defaultMessage='Key and Secret'\n                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                    />\n                                </Typography>\n                                {\n                                    keymanager.enableMapOAuthConsumerApps && (\n                                        <Box ml={2}>\n                                            <ImportExternalApp\n                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                consumerKey={providedConsumerKey}\n                                                consumerSecret={providedConsumerSecret}\n                                                isUserOwner={isUserOwner}\n                                                key={key}\n                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                            />\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            <Box m={2}>\n                                <ViewKeys\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    keys={keys}\n                                    isKeyJWT={isKeyJWT}\n                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                    isUserOwner={isUserOwner}\n                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                    keyManagerConfig={keymanager}\n                                />\n                            </Box>\n                            <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                {\n                                    key\n                                        ? (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configurations'\n                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configuration'\n                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                            />\n                                        )\n                                }\n                            </Typography>\n                            <Box m={2}>\n                                <KeyConfiguration\n                                    keys={keys}\n                                    key={key}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    updateKeyRequest={this.updateKeyRequest}\n                                    keyRequest={keyRequest}\n                                    isUserOwner={isUserOwner}\n                                    isKeysAvailable={key}\n                                    keyManagerConfig={keymanager}\n                                    validating={validating}\n                                />\n                                <div className={classes.generateWrapper}>\n                                    <ScopeValidation\n                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                        resourceMethod={resourceMethods.POST}\n                                    >\n                                        {!isUserOwner ? (\n                                            <>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={\n                                                        key ? this.updateKeys : this.generateKeys\n                                                    }\n                                                    disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation}\n                                                >\n                                                    {key ? 'Update keys' : 'Generate Keys'}\n                                                    {isLoading && <CircularProgress size={20} />}\n                                                </Button>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Only owner can generate or update keys'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                                <Box display='flex'>  \n                                                    <Button\n                                                        variant='contained'\n                                                        color='primary'\n                                                        className={classes.button}\n                                                        onClick={key ? this.updateKeys : this.generateKeys}\n                                                        disabled={isLoading || !keymanager.enableOAuthAppCreation}\n                                                    >\n                                                        {key ? 'Update' : 'Generate Keys'}\n                                                        {isLoading && <CircularProgress size={20} />}\n                                                    </Button>\n                                                    {!keymanager.enableOAuthAppCreation && (<Box m={2} display='flex'>\n                                                        <WarningIcon className={classes.warningIcon} />\n                                                        <Typography variant=\"body1\">\n                                                            <FormattedMessage\n                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                            />\n                                                        </Typography>\n                                                    </Box>)}\n                                                </Box>\n                                            )}\n                                    </ScopeValidation>\n                                </div>\n\n                            </Box>\n                        </TabPanel>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, index, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Link\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </Link>\n                        </ScopeValidation>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n    index: PropTypes.number.isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        }\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td':{\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        expanded: true,\n        selectedAppId: false,\n        selectedKeyType: false,\n        subscriptionRequest: {\n            applicationId: '',\n            apiId: '',\n            throttlingPolicy: '',\n        },\n        throttlingPolicyList: [],\n        applicationOwner: '',\n        hashEnabled: false,\n        isSubscribing: false,\n    };\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2') &&\n        !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2') &&\n         !api.securityScheme.includes('api_key');\n        const renderCredentialInfo = () => {\n            const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                        + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                            <FormattedMessage\n                                        id='Apis.Details.Creadentials.credetials.mutualssl'\n                                        defaultMessage={'Subscription is not required for Mutual SSL APIs' + \n                                        ' or APIs with only Basic Authentication.'}\n                                    />\n                            </Typography>\n                        </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.' +\n                                        'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                                     `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                            >\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.buttonElm}\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL || \n                                                        isOnlyBasicAuth}\n                                                >\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th} />\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={index}\n                                                loadInfo={this.loadInfo}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' className={classes.titleSub}>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.Credentials.api.credentials'\n                                    defaultMessage='Subscriptions'\n                                />\n                                {applicationsAvailable.length > 0 && (\n                                    <Link\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth) ? null :\n                                             `/apis/${api.id}/credentials/wizard`}\n                                        style={!api.isSubscriptionAvailable\n                                            ? { pointerEvents: 'none' } : null}\n                                        className={classes.addLinkWrapper}\n                                    >\n                                        <Button\n                                            color='secondary'\n                                            disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                 || isOnlyBasicAuth}\n                                            size='small'\n                                        >\n                                            <Icon>add_circle_outline</Icon>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.'\n                                                + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                defaultMessage='Subscription &amp; Key Generation Wizard'\n                                            />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n"],"sourceRoot":""}