{"version":3,"sources":["webpack:///./node_modules/graphql-language-service-utils/esm sync ^.*\\.js$","webpack:///./node_modules/graphql-language-service-utils/esm sync ^.*\\.json$","webpack:///./node_modules/graphql-language-service-utils/esm lazy ^.*\\.js$ namespace object","webpack:///./node_modules/graphql-language-service-utils/esm lazy ^.*\\.json$ namespace object","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/QueryComplexityView.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLUI.jsx","webpack:///./source/src/app/components/Apis/Details/GraphQLConsole/GraphQLConsole.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","webpackAsyncContext","ids","Promise","all","slice","then","webpackEmptyAsyncContext","useStyles","makeStyles","theme","root","width","title","fontSize","typography","pxToRem","fontWeight","flexBasis","flexShrink","marginTop","spacing","marginBottom","marginLeft","marginRight","heading","fontWeightRegular","column","QueryComplexityView","props","classes","api","useContext","ApiContext","open","setOpen","typelist","setTypeList","useState","state","setState","useEffect","apiId","Api","getGraphqlPoliciesComplexity","res","list","type","Set","respond","length","getGraphqlPoliciesComplexityTypes","array","typeList","fieldList","ob","obj","field","complexityValue","push","getDefaultComplexity","Progress","className","style","display","position","defaultMessage","Button","size","onClick","Divider","maxHeight","overflow","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","Typography","ExpansionPanelDetails","propTypes","PropTypes","isRequired","func","buildSchema","require","GraphQLUI","authorizationHeader","URLs","securitySchemeType","accessTokenProvider","schema","setSchema","query","setQuery","isExplorerOpen","setIsExplorerOpen","graphiqlEl","useRef","React","apiID","getGraphQLSchemaByAPIId","graphqlSchemaObj","data","parameters","handleClick","handleToggleExplorer","newExplorerIsOpen","Box","m","TextField","label","value","https","name","fullWidth","margin","variant","InputProps","disabled","Collapse","in","timeout","unmountOnExit","onEdit","explorerIsOpen","onToggleExplorer","height","flexGrow","ref","fetcher","graphQLParams","token","fetch","method","headers","Accept","body","JSON","stringify","response","json","onEditQuery","Toolbar","current","handlePrettifyQuery","handleToggleHistory","shape","paper","string","buttonIcon","padding","grid","paddingRight","justifyContent","userNotificationPaper","titleSub","paddingTop","paddingBottom","GraphQLConsole","environmentObject","endpointURLs","setURLs","setSecurityScheme","notFound","setNotFound","username","setUsername","password","setPassword","selectedEnvironment","setSelectedEnvironment","environments","setEnvironments","scopes","setScopes","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","selectedKeyType","setSelectedKey","sandboxApiKey","setSandboxApiKey","productionApiKey","setProductionApiKey","setKeys","labels","setLabels","user","AuthManager","getUser","updateAccessToken","accessToken","get","getAPIById","apiResponse","apiData","environment","endpoint","environmentName","Label","scopeList","scope","catch","error","status","isApiKeyEnabled","securityScheme","includes","isPrototypedAPI","lifeCycleStatus","toLowerCase","Paper","Grid","container","item","md","component","Icon","TryOutController","setSelectedKeyType","selectedKey","isUpdateToken","btoa"],"mappings":"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","file":"GraphQLConsole.1449b43a4ad083670f2a.bundle.js","sourcesContent":["var map = {\n\t\"./Range.js\": 1047,\n\t\"./file.js\": 1143,\n\t\"./getASTNodeAtPosition.js\": 1142,\n\t\"./index.js\": 1088,\n\t\"./validateWithCustomRules.js\": 1194\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1903;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1904;","var map = {\n\t\"./Range.js\": [\n\t\t1047\n\t],\n\t\"./file.js\": [\n\t\t1143\n\t],\n\t\"./getASTNodeAtPosition.js\": [\n\t\t1142\n\t],\n\t\"./index.js\": [\n\t\t1088\n\t],\n\t\"./validateWithCustomRules.js\": [\n\t\t1194\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1905;\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1906;","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    title: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: 'bold',\n        flexBasis: '50%',\n        flexShrink: 0,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(4),\n        marginRight: theme.spacing(1),\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n        flexBasis: '50%',\n        flexShrink: 0,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    column: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n        flexBasis: '33.33%',\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n/**\n * This component retrieve complexity details of API\n * @param {*} props The props passed to the layout\n */\n\nexport default function QueryComplexityView(props) {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const { open, setOpen } = props;\n    const [typelist, setTypeList] = useState([]);\n    const [state, setState] = useState(null);\n\n    /**\n     * If no complexity is defined for fields,Get default complexity value of 1.\n     */\n    function getDefaultComplexity() {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexityType = apiClient.getGraphqlPoliciesComplexityTypes(apiId);\n        promisedComplexityType\n            .then((res) => {\n                const array = [];\n                res.typeList.map((respond) => {\n                    respond.fieldList.map((ob) => {\n                        const obj = {};\n                        obj.type = respond.type;\n                        obj.field = ob;\n                        obj.complexityValue = 1;\n                        array.push(obj);\n                        return ob;\n                    });\n                    return array;\n                });\n                setState(array);\n                const type = [...new Set(array.map((respond) => respond.type))];\n                setTypeList(type);\n            });\n    }\n\n    useEffect(() => {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.getGraphqlPoliciesComplexity(apiId);\n        promisedComplexity\n            .then((res) => {\n                setState(res.list);\n                const type = [...new Set(res.list.map((respond) => respond.type))];\n                setTypeList(type);\n                if (res.list.length === 0) {\n                    getDefaultComplexity();\n                }\n            });\n    }, []);\n\n    const handleClose = () => {\n        setOpen(!open);\n    };\n\n    if (state === null) {\n        return <Progress />;\n    }\n    return (\n        <>\n            <div>\n                <div className={classes.title} style={{ display: 'flex', position: 'relative' }}>\n                    <div>\n                        <FormattedMessage\n                            id='Apis.Details.GraphQLConsole.QueryComplexityView.title'\n                            defaultMessage='Custom Complexity Values'\n                        />\n                    </div>\n                    <Button size='small' onClick={handleClose}>\n                        <CloseIcon />\n                    </Button>\n                </div>\n                <Divider />\n                <div\n                    className={classes.root}\n                    style={{ maxHeight: '740px', overflow: 'scroll' }}\n                >\n                    <div>\n                        {typelist.map((res) => (\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls='panel1a-content'\n                                    id='panel1a-header'\n                                >\n                                    <Typography className={classes.heading}>\n                                        {res}\n                                    </Typography>\n                                </ExpansionPanelSummary>\n                                <Divider />\n                                {state.map((respond) => ((respond.type === res) && (\n                                    <ExpansionPanelDetails>\n                                        <div className={classes.column}>\n                                            {respond.field}\n                                            {':'}\n                                        </div>\n                                        <div className={classes.column}>\n                                            {respond.complexityValue}\n                                        </div>\n                                    </ExpansionPanelDetails>\n                                )))}\n                            </ExpansionPanel>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nQueryComplexityView.propTypes = {\n    open: PropTypes.isRequired,\n    setOpen: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, useEffect, useRef, useContext,\n} from 'react';\nimport GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\nimport 'graphiql/graphiql.css';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport { FormattedMessage } from 'react-intl';\nimport Collapse from '@material-ui/core/Collapse';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport QueryComplexityView from './QueryComplexityView';\n\nimport Progress from '../../../Shared/Progress';\n\nconst { buildSchema } = require('graphql');\n\n/**\n *\n * @param {*} props\n */\nexport default function GraphQLUI(props) {\n    const {\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        accessTokenProvider,\n\n    } = props;\n    const { api } = useContext(ApiContext);\n    const [schema, setSchema] = useState(null);\n    const [query, setQuery] = useState('');\n    const [isExplorerOpen, setIsExplorerOpen] = useState(false);\n    const graphiqlEl = useRef(null);\n    const [open, setOpen] = React.useState(true);\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseGraphQL = apiClient.getGraphQLSchemaByAPIId(apiID);\n\n        promiseGraphQL\n            .then((res) => {\n                const graphqlSchemaObj = buildSchema(res.data);\n                setSchema(graphqlSchemaObj);\n            });\n    }, []);\n\n    const parameters = {};\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n\n    const handleToggleExplorer = () => {\n        const newExplorerIsOpen = !isExplorerOpen;\n        parameters.isExplorerOpen = newExplorerIsOpen;\n        setIsExplorerOpen(newExplorerIsOpen);\n    };\n\n    /**\n     *\n     * @param {*} graphQLParams\n     */\n    function graphQLFetcher(graphQLParams) {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessTokenProvider();\n        } else if (securitySchemeType === 'BASIC') {\n            token = 'Basic ' + accessTokenProvider();\n        } else {\n            token = 'Bearer ' + accessTokenProvider();\n        }\n        return fetch((URLs.https), {\n            method: 'post',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                [authorizationHeader]: token,\n            },\n            body: JSON.stringify(graphQLParams),\n        }).then((response) => response.json());\n    }\n    if ({ schema } === null) {\n        return <Progress />;\n    } else {\n        return (\n            <>\n                <Box width='30%' m={1}>\n                    <TextField\n\n                        label={(\n                            <FormattedMessage\n                                defaultMessage='Gateway URLs'\n                                id='Apis.Details.GraphQLConsole.GraphQLUI.URLs'\n                            />\n                        )}\n                        value={URLs.https}\n                        name='selectedURL'\n                        fullWidth\n                        margin='normal'\n                        variant='outlined'\n                        InputProps={URLs.https}\n                        disabled\n                    />\n                </Box>\n                <div>\n                    <Box display='flex'>\n                        <Box display='flex'>\n                            <Collapse in={!open} timeout='auto' unmountOnExit>\n                                <QueryComplexityView\n                                    open={open}\n                                    setOpen={setOpen}\n                                />\n                            </Collapse>\n                        </Box>\n                        <Box display='flex' width={1}>\n                            <Box display='flex'>\n                                <GraphiQLExplorer\n                                    schema={schema}\n                                    query={query}\n                                    onEdit={setQuery}\n                                    explorerIsOpen={isExplorerOpen}\n                                    onToggleExplorer={handleToggleExplorer}\n                                />\n                            </Box>\n                            <Box display='flex' height='800px' flexGrow={1}>\n                                <GraphiQL\n                                    ref={graphiqlEl}\n                                    fetcher={(graphQLFetcher)}\n                                    schema={schema}\n                                    query={query}\n                                    onEditQuery={setQuery}\n                                >\n                                    <GraphiQL.Toolbar>\n                                        <GraphiQL.Button\n                                            onClick={() => graphiqlEl.current.handlePrettifyQuery()}\n                                            label='Prettify'\n                                            title='Prettify Query (Shift-Ctrl-P)'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={() => graphiqlEl.current.handleToggleHistory()}\n                                            label='History'\n                                            title='Show History'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n                                            label='Explorer'\n                                            title='Toggle Explorer'\n                                        />\n                                        <GraphiQL.Button\n                                            onClick={handleClick}\n                                            label='Complexity Analysis'\n                                            title='View Field`s Complexity Values'\n                                        />\n                                    </GraphiQL.Toolbar>\n\n                                </GraphiQL>\n                            </Box>\n                        </Box>\n                    </Box>\n                </div>\n            </>\n        );\n    }\n}\n\nGraphQLUI.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AuthManager from 'AppData/AuthManager';\nimport Icon from '@material-ui/core/Icon';\nimport GraphQLUI from './GraphQLUI';\nimport TryOutController from '../ApiConsole/TryOutController';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\n\n\nconst useStyles = makeStyles((theme) => ({\n    buttonIcon: {\n        marginRight: 10,\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\n\nexport default function GraphQLConsole() {\n    const classes = useStyles();\n    const { api } = useContext(ApiContext);\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject[0].URLs);\n    const [securitySchemeType, setSecurityScheme] = useState('OAUTH');\n    const [notFound, setNotFound] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedEnvironment, setSelectedEnvironment] = useState();\n    const [environments, setEnvironments] = useState();\n    const [scopes, setScopes] = useState([]);\n    const [productionAccessToken, setProductionAccessToken] = useState();\n    const [sandboxAccessToken, setSandboxAccessToken] = useState();\n    const [selectedKeyType, setSelectedKey] = useState('PRODUCTION');\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const [keys, setKeys] = useState([]);\n    const [labels, setLabels] = useState();\n    const user = AuthManager.getUser();\n\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseAPI = apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                const apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    const environment = apiData.endpointURLs.map((endpoint) => { return endpoint.environmentName; });\n                    setEnvironments(environment);\n                }\n                if (apiData.labels) {\n                    const Label = apiData.labels.map((label) => { return label.name; });\n                    setLabels(Label);\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.name; });\n                    setScopes(scopeList);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n    }, []);\n\n\n    /**\n     * Load the access token for given key type\n     */\n    function updateAccessToken() {\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        if (selectedKeyType === 'PRODUCTION') {\n            setProductionAccessToken(accessToken);\n        } else {\n            setSandboxAccessToken(accessToken);\n        }\n    }\n\n    /**\n     * set Password\n     * @param {*} selectedKey\n     * @param {*} isUpdateToken\n     */\n    function setSelectedKeyType(selectedKey, isUpdateToken) {\n        if (isUpdateToken) {\n            setSelectedKey(selectedKey, updateAccessToken);\n        } else {\n            setSelectedKey(selectedKey);\n        }\n    }\n\n    function accessTokenProvider() {\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n        }\n    }\n\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n\n    return (\n        <>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.GraphQLConsole.GraphQLConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!isPrototypedAPI && !user && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>warning</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                </Grid>\n                <TryOutController\n                    setSecurityScheme={setSecurityScheme}\n                    securitySchemeType={securitySchemeType}\n                    setSelectedEnvironment={setSelectedEnvironment}\n                    selectedEnvironment={selectedEnvironment}\n                    productionAccessToken={productionAccessToken}\n                    setProductionAccessToken={setProductionAccessToken}\n                    sandboxAccessToken={sandboxAccessToken}\n                    setSandboxAccessToken={setSandboxAccessToken}\n                    environments={environments}\n                    scopes={scopes}\n                    labels={labels}\n                    setUsername={setUsername}\n                    setPassword={setPassword}\n                    username={username}\n                    password={password}\n                    setSelectedKeyType={setSelectedKeyType}\n                    selectedKeyType={selectedKeyType}\n                    setKeys={setKeys}\n                    setURLs={setURLs}\n                    setProductionApiKey={setProductionApiKey}\n                    setSandboxApiKey={setSandboxApiKey}\n                    productionApiKey={productionApiKey}\n                    sandboxApiKey={sandboxApiKey}\n                    environmentObject={environmentObject}\n                    api={api}\n                />\n                <Paper />\n\n            </Paper>\n            <Paper className={classes.paper}>\n                <GraphQLUI\n                    authorizationHeader={authorizationHeader}\n                    URLs={URLs}\n                    securitySchemeType={securitySchemeType}\n                    accessTokenProvider={accessTokenProvider}\n                />\n            </Paper>\n        </>\n    );\n}\n\nGraphQLConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"sourceRoot":""}