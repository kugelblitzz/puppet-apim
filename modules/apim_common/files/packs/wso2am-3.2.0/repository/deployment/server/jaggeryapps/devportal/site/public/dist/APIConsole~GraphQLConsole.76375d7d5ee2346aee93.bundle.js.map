{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SelectAppPanel.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx"],"names":["withStyles","theme","centerItems","margin","tryoutHeading","marginTop","spacing","fontWeight","menuItem","color","palette","getContrastText","background","paper","props","selectedApplication","selectedKeyType","subscriptions","handleChanges","classes","handleSelectPanelChange","event","target","name","value","Grid","x","md","className","TextField","fullWidth","id","select","label","defaultMessage","onChange","SelectProps","helperText","variant","map","sub","MenuItem","applicationInfo","applicationId","key","Typography","FormControl","component","RadioGroup","row","find","status","FormControlLabel","control","Radio","styles","makeStyles","tokenType","display","padding","grid","marginBottom","paddingRight","justifyContent","genKeyButton","width","height","marginLeft","gatewayEnvironment","categoryHeading","tooltip","warningIcon","fontSize","marginRight","TryOutController","securitySchemeType","selectedEnvironment","environments","containerMngEnvironments","labels","productionAccessToken","sandboxAccessToken","setKeys","setSelectedKeyType","setSelectedKeyManager","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","scopes","setSecurityScheme","setUsername","setPassword","username","password","updateSwagger","setProductionApiKey","setSandboxApiKey","productionApiKey","sandboxApiKey","environmentObject","setURLs","api","selectedKeyManager","showToken","setShowToken","useState","isUpdating","setIsUpdating","notFound","setNotFound","setSubscriptions","setSelectedApplication","keyManagers","setKeyManagers","selectedKMObject","setSelectedKMObject","ksGenerated","setKSGenerated","apiID","restApi","Api","urls","elm","environmentName","URLs","useEffect","subscriptionsList","newSelectedApplication","accessToken","selectedKeyTypes","lifeCycleStatus","toLowerCase","getSubscriptions","then","subscriptionsResponse","obj","list","filter","item","length","Application","get","application","getKeys","appKeys","keyType","token","keys","catch","error","getKeyManagers","response","responseKeyManagerList","body","push","filteredKMs","km","selectedKeys","consumerKey","updateApplication","user","AuthManager","getUser","Progress","isApiKeyEnabled","isBasicAuthEnabled","isOAuthEnabled","isTestKeyEnabled","authorizationHeader","prefix","securityScheme","includes","isPrototypedAPI","showSecurityType","enableStore","tokenValue","containerMngEnvMenuItems","envType","clusterDetails","forEach","disabled","deploymentEnvironmentName","cluster","clusterName","clusterDisplayName","authHeader","locale","Box","mb","alignItems","enabled","xs","values","what","sdefaultMessage","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","Icon","startAdornment","style","minWidth","Button","generateApiKey","console","log","apikey","generateToken","CircularProgress","size","Tooltip","placement","interactive","title","m","mt","env","propTypes","PropTypes","shape","string","isRequired","inputAdornmentStart"],"mappings":"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","file":"APIConsole~GraphQLConsole.76375d7d5ee2346aee93.bundle.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Grid, FormControl, FormControlLabel, RadioGroup, Radio, Typography,\n} from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst styles = (theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tryoutHeading: {\n        marginTop: theme.spacing(1),\n        fontWeight: 400,\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nconst SelectAppPanel = (props) => {\n    let {\n        selectedApplication, selectedKeyType,\n    } = props;\n\n    const {\n        subscriptions, handleChanges, classes,\n    } = props;\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} event event fired\n     */\n    const handleSelectPanelChange = (event) => {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedApplication':\n                selectedApplication = value;\n                break;\n            case 'selectedKeyType':\n                selectedKeyType = value;\n                break;\n            default:\n                break;\n        }\n        handleChanges(event);\n    };\n    return (\n        <>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <TextField\n                    fullWidth\n                    id='selected-application'\n                    select\n                    label={(\n                        <FormattedMessage\n                            defaultMessage='Applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.applications'\n                        />\n                    )}\n                    value={selectedApplication}\n                    name='selectedApplication'\n                    onChange={handleSelectPanelChange}\n                    SelectProps={subscriptions}\n                    helperText={(\n                        <FormattedMessage\n                            defaultMessage='Subscribed applications'\n                            id='Apis.Details.ApiConsole.SelectAppPanel.select.subscribed.application'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                >\n                    {subscriptions.map((sub) => (\n                        <MenuItem\n                            value={sub.applicationInfo.applicationId}\n                            key={sub.applicationInfo.applicationId}\n                            className={classes.menuItem}\n                        >\n                            {sub.applicationInfo.name}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Typography variant='h6' color='textSecondary' className={classes.tryoutHeading}>\n                    <FormattedMessage\n                        id='Apis.Details.ApiConsole.SelectAppPanel.select.key.type.heading'\n                        defaultMessage='Key Type'\n                    />\n                </Typography>\n                <FormControl component='fieldKeyType'>\n                    <RadioGroup\n                        name='selectedKeyType'\n                        value={selectedKeyType}\n                        onChange={handleSelectPanelChange}\n                        row\n                    >\n                        {(subscriptions != null && subscriptions.find((sub) => sub.applicationId\n                                === selectedApplication).status === 'UNBLOCKED')\n                                && (\n                                    <FormControlLabel\n                                        value='PRODUCTION'\n                                        control={<Radio />}\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.SelectAppPanel.production.radio'\n                                                defaultMessage='Production'\n                                            />\n                                        )}\n                                    />\n                                )}\n                        <FormControlLabel\n                            value='SANDBOX'\n                            control={<Radio />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.SelectAppPanel.sandbox.radio'\n                                    defaultMessage='Sandbox'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n        </>\n    );\n};\n\nexport default withStyles(styles)(SelectAppPanel);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useEffect, useState,\n} from 'react';\nimport { FormattedMessage, IntlProvider } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    Radio, RadioGroup, FormControlLabel, FormControl, CircularProgress, Tooltip,\n} from '@material-ui/core';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport Application from '../../../../data/Application';\nimport SelectAppPanel from './SelectAppPanel';\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = makeStyles((theme) => ({\n    centerItems: {\n        margin: 'auto',\n    },\n    tokenType: {\n        margin: 'auto',\n        display: 'flex',\n        '& .MuiButton-contained.Mui-disabled span.MuiButton-label': {\n            color: '#999999',\n        },\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    tryoutHeading: {\n        fontWeight: 400,\n    },\n    genKeyButton: {\n        width: theme.spacing(20),\n        height: theme.spacing(5),\n        marginTop: theme.spacing(2.5),\n        marginLeft: theme.spacing(2),\n    },\n    gatewayEnvironment: {\n        marginTop: theme.spacing(4),\n    },\n    categoryHeading: {\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(-5),\n    },\n    tooltip: {\n        marginLeft: theme.spacing(1),\n    },\n    menuItem: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 25,\n        marginRight: 10,\n    },\n}));\n\n/**\n * TryOut component\n *\n * @class TryOutController\n * @extends {Component}\n */\nfunction TryOutController(props) {\n    const {\n        securitySchemeType, selectedEnvironment, environments, containerMngEnvironments, labels,\n        productionAccessToken, sandboxAccessToken, selectedKeyType, setKeys, setSelectedKeyType,\n        setSelectedKeyManager,\n        setSelectedEnvironment, setProductionAccessToken, setSandboxAccessToken, scopes,\n        setSecurityScheme, setUsername, setPassword, username, password, updateSwagger,\n        setProductionApiKey, setSandboxApiKey, productionApiKey, sandboxApiKey, environmentObject, setURLs, api,\n    } = props;\n    let { selectedKeyManager } = props;\n    selectedKeyManager = selectedKeyManager || 'Resident Key Manager';\n\n    const classes = styles();\n    const [showToken, setShowToken] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [selectedApplication, setSelectedApplication] = useState([]);\n    const [keyManagers, setKeyManagers] = useState([]);\n    const [selectedKMObject, setSelectedKMObject] = useState(null);\n    const [ksGenerated, setKSGenerated] = useState(false);\n    const apiID = api.id;\n    const restApi = new Api();\n\n    useEffect(() => {\n        let subscriptionsList;\n        let newSelectedApplication;\n        let keys;\n        let selectedKeyTypes = 'PRODUCTION';\n        let accessToken;\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            const promiseSubscriptions = restApi.getSubscriptions(apiID);\n            promiseSubscriptions.then((subscriptionsResponse) => {\n                if (subscriptionsResponse !== null) {\n                    subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n                        || item.status === 'PROD_ONLY_BLOCKED');\n\n                    if (subscriptionsList && subscriptionsList.length > 0) {\n                        newSelectedApplication = subscriptionsList[0].applicationId;\n                        Application.get(newSelectedApplication)\n                            .then((application) => {\n                                return application.getKeys();\n                            })\n                            .then((appKeys) => {\n                                if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'SANDBOX') {\n                                    selectedKeyTypes = 'SANDBOX';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                } else if (appKeys.get(selectedKeyManager)\n                                    && appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                                    selectedKeyTypes = 'PRODUCTION';\n                                    ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                                }\n                                setSelectedApplication(newSelectedApplication);\n                                setSubscriptions(subscriptionsList);\n                                setKeys(appKeys);\n                                setSelectedEnvironment(selectedEnvironment, false);\n                                setSelectedKeyType(selectedKeyTypes, false);\n                                if (selectedKeyType === 'PRODUCTION') {\n                                    setProductionAccessToken(accessToken);\n                                } else {\n                                    setSandboxAccessToken(accessToken);\n                                }\n                            });\n                    } else {\n                        setSelectedApplication(newSelectedApplication);\n                        setSubscriptions(subscriptionsList);\n                        setKeys(keys);\n                        setSelectedEnvironment(selectedEnvironment, false);\n                        if (selectedKeyType === 'PRODUCTION') {\n                            setProductionAccessToken(accessToken);\n                        } else {\n                            setSandboxAccessToken(accessToken);\n                        }\n                        setSelectedKeyType(selectedKeyType, false);\n                    }\n                } else {\n                    setSelectedApplication(newSelectedApplication);\n                    setSubscriptions(subscriptionsList);\n                    setKeys(keys);\n                    setSelectedEnvironment(selectedEnvironment, false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    setSelectedKeyType(selectedKeyType, false);\n                }\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n            const promisedKeyManagers = restApi.getKeyManagers();\n            promisedKeyManagers\n                .then((response) => {\n                    const responseKeyManagerList = [];\n                    response.body.list.map((item) => responseKeyManagerList.push(item));\n                    setKeyManagers(responseKeyManagerList);\n                    const filteredKMs = (responseKeyManagerList.filter((km) => km.name === selectedKeyManager));\n                    if (filteredKMs && filteredKMs.length > 0) {\n                        setSelectedKMObject(filteredKMs[0]);\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                });\n        }\n    }, []);\n\n\n    /**\n     * Generate access token\n     * */\n    function generateAccessToken() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            setIsUpdating(true);\n            const applicationPromise = Application.get(selectedApplication);\n            applicationPromise\n                .then((application) => application.generateToken(\n                    selectedKeyManager,\n                    selectedKeyType,\n                    3600,\n                    scopes,\n                ))\n                .then((response) => {\n                    console.log('token generated successfully ' + response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionAccessToken(response.accessToken);\n                    } else {\n                        setSandboxAccessToken(response.accessToken);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     * Generate api key\n     * */\n    function generateApiKey() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            setIsUpdating(true);\n            const promisedKey = restApi.generateApiKey(selectedApplication, selectedKeyType, -1);\n            promisedKey\n                .then((response) => {\n                    console.log('Non empty response received', response);\n                    setShowToken(false);\n                    if (selectedKeyType === 'PRODUCTION') {\n                        setProductionApiKey(response.body.apikey);\n                    } else {\n                        setSandboxApiKey(response.body.apikey);\n                    }\n                    setIsUpdating(false);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    const { status } = error;\n                    if (status === 404) {\n                        setNotFound(true);\n                    }\n                    setIsUpdating(false);\n                });\n        }\n    }\n\n    /**\n     *\n     * Handle onClick of shown access token\n     * @memberof TryOutController\n     */\n    function handleClickShowToken() {\n        setShowToken(!showToken);\n    }\n\n    /**\n     * Load the selected application information\n     * @memberof TryOutController\n     */\n    function updateApplication() {\n        if (api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() !== 'prototyped') {\n            let accessToken;\n            let keyType;\n            if (subscriptions !== null && subscriptions.length !== 0 && selectedApplication.length !== 0) {\n                if (subscriptions.find((sub) => sub.applicationId\n                    === selectedApplication).status === 'PROD_ONLY_BLOCKED') {\n                    setSelectedKeyType(selectedKeyType, false);\n                    keyType = 'SANDBOX';\n                } else {\n                    keyType = selectedKeyType;\n                }\n            }\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(keyType || 'PRODUCTION');\n                })\n                .then((appKeys) => {\n                    const selectedKeys = appKeys.get(selectedKeyManager);\n                    if (selectedKeys && selectedKeys.keyType === selectedKeyType) {\n                        ({ accessToken } = selectedKeys.token);\n                    }\n                    if (selectedKeys && selectedKeys.keyType === 'PRODUCTION') {\n                        setProductionAccessToken(accessToken);\n                    } else if (selectedKeys && selectedKeys.keyType === 'SANDBOX') {\n                        setSandboxAccessToken(accessToken);\n                    }\n                    if (selectedKeys && selectedKeys.consumerKey && selectedKeys.consumerKey !== '') {\n                        setKSGenerated(true);\n                    } else {\n                        setKSGenerated(false);\n                    }\n                    setKeys(appKeys);\n                });\n        }\n    }\n\n    useEffect(() => {\n        updateApplication();\n    }, [selectedApplication, selectedKeyType, selectedEnvironment, securitySchemeType]);\n\n    /**\n     * Handle onChange of inputs\n     * @param {*} event event\n     * @memberof TryOutController\n     */\n    function handleChanges(event) {\n        const { target } = event;\n        const { name, value } = target;\n        switch (name) {\n            case 'selectedEnvironment':\n                setSelectedEnvironment(value, true);\n                updateSwagger(value);\n                if (environmentObject) {\n                    const urls = environmentObject.find((elm) => value === elm.environmentName).URLs;\n                    setURLs(urls);\n                }\n                break;\n            case 'selectedApplication':\n                setProductionAccessToken('');\n                setSandboxAccessToken('');\n                setProductionApiKey('');\n                setSandboxApiKey('');\n                setSelectedApplication(value);\n                break;\n            case 'selectedKeyManager':\n                setSelectedKeyManager(value, true, selectedApplication);\n                break;\n            case 'selectedKeyType':\n                if (!productionAccessToken || !sandboxAccessToken) {\n                    setSelectedKeyType(value, true, selectedApplication);\n                } else {\n                    setSelectedKeyType(value, false, selectedApplication);\n                }\n                break;\n            case 'securityScheme':\n                setSecurityScheme(value);\n                break;\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'accessToken':\n                if (securitySchemeType === 'API-KEY' && selectedKeyType === 'PRODUCTION') {\n                    setProductionApiKey(value);\n                } else if (securitySchemeType === 'API-KEY' && selectedKeyType === 'SANDBOX') {\n                    setSandboxApiKey(value);\n                } else if (selectedKeyType === 'PRODUCTION') {\n                    setProductionAccessToken(value);\n                } else {\n                    setSandboxAccessToken(value);\n                }\n                break;\n            default:\n        }\n    }\n\n    const user = AuthManager.getUser();\n    if (api == null) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return 'API Not found !';\n    }\n    let isApiKeyEnabled = false;\n    let isBasicAuthEnabled = false;\n    let isOAuthEnabled = false;\n    let isTestKeyEnabled = false;\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n    let prefix = 'Bearer';\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        isBasicAuthEnabled = api.securityScheme.includes('basic_auth');\n        isOAuthEnabled = api.securityScheme.includes('oauth2');\n        isTestKeyEnabled = api.securityScheme.includes('test_auth');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n            prefix = '';\n        }\n        if (isTestKeyEnabled && securitySchemeType === 'TEST') {\n            authorizationHeader = 'testKey';\n            prefix = '';\n        }\n    }\n    const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n    const isPublished = api.lifeCycleStatus.toLowerCase() === 'published';\n    const showSecurityType = isPublished || (isPrototypedAPI && api.enableStore === true);\n\n    let tokenValue = '';\n    if (securitySchemeType === 'API-KEY') {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionApiKey : sandboxApiKey;\n    } else {\n        tokenValue = selectedKeyType === 'PRODUCTION' ? productionAccessToken : sandboxAccessToken;\n    }\n\n    // The rendering logic of container management menus items are done here\n    // because when grouping container management type and clusters with <> and </>\n    // the handleChange event is not triggered. Hence handle rendering logic here.\n    const containerMngEnvMenuItems = [];\n    if (containerMngEnvironments) {\n        containerMngEnvironments.filter((envType) => envType.clusterDetails.length > 0).forEach((envType) => {\n            // container management system type\n            containerMngEnvMenuItems.push(\n                <MenuItem value='' disabled className={classes.menuItem}>\n                    <em>\n                        {envType.deploymentEnvironmentName}\n                    </em>\n                </MenuItem>,\n            );\n            // clusters of the container management system type\n            envType.clusterDetails.forEach((cluster) => {\n                containerMngEnvMenuItems.push(\n                    <MenuItem\n                        value={cluster.clusterName}\n                        key={cluster.clusterName}\n                        className={classes.menuItem}\n                    >\n                        {cluster.clusterDisplayName}\n                    </MenuItem>,\n                );\n            });\n        });\n    }\n\n    const authHeader = `${authorizationHeader}: ${prefix}`;\n\n    return (\n        <IntlProvider locale='en'>\n            <Grid x={12} md={6} className={classes.centerItems}>\n                <Box>\n                    {securitySchemeType !== 'TEST' && (\n                        <>\n                            <Typography variant='h5' color='textPrimary' className={classes.categoryHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.heading'\n                                    defaultMessage='Security'\n                                />\n                            </Typography>\n                            <Box mb={1}>\n                                <Typography variant='body1'>\n                                    <Box display='flex' alignItems='center'>\n                                        {(selectedKMObject && selectedKMObject.enabled) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.one'\n                                                defaultMessage='The Resident Key Manager is selected for try out console.'\n                                            />\n                                        )}\n                                        {(selectedKMObject && !selectedKMObject.enabled) && (\n                                            <>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.TryOutController.default.km.msg.two'\n                                                        defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'But the default key manager is disabled at the moment.'}\n                                                    />\n                                                </div>\n                                            </>\n                                        )}\n                                        {(selectedKMObject && selectedKMObject.length === 0) && (\n                                            <FormattedMessage\n                                                id='Apis.Details.ApiConsole.TryOutController.default.km.msg.three'\n                                                defaultMessage={'Try it console is only accessible via the default key manager.'\n                                        + 'Something went wrong while selecting the default Key manager.'}\n                                            />\n                                        )}\n                                    </Box>\n                                </Typography>\n                            </Box>\n                            <Typography variant='h6' color='textSecondary' className={classes.tryoutHeading}>\n                                <FormattedMessage\n                                    id='api.console.security.type.heading'\n                                    defaultMessage='Security Type'\n                                />\n                            </Typography>\n                        </>\n                    )}\n                    {((isApiKeyEnabled || isBasicAuthEnabled || isOAuthEnabled) && showSecurityType) && (\n                        <FormControl component='fieldset'>\n                            <RadioGroup\n                                name='securityScheme'\n                                value={securitySchemeType}\n                                onChange={handleChanges}\n                                row\n                            >\n                                <FormControlLabel\n                                    value='OAUTH'\n                                    disabled={!isOAuthEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.oauth'\n                                            defaultMessage='OAuth'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='API-KEY'\n                                    disabled={!isApiKeyEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.apikey'\n                                            defaultMessage='API Key'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='BASIC'\n                                    disabled={!isBasicAuthEnabled}\n                                    control={<Radio />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.security.scheme.basic'\n                                            defaultMessage='Basic'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                </Box>\n            </Grid>\n            {!isPrototypedAPI\n                && (\n                    <Grid xs={12} md={12} item>\n                        <Box display='block'>\n                            {user && subscriptions\n                                && subscriptions.length > 0 && securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST'\n                                && (\n                                    <SelectAppPanel\n                                        subscriptions={subscriptions}\n                                        handleChanges={handleChanges}\n                                        selectedApplication={selectedApplication}\n                                        selectedKeyManager={selectedKeyManager}\n                                        selectedKeyType={selectedKeyType}\n                                        keyManagers={keyManagers}\n                                    />\n                                )}\n                            {subscriptions && subscriptions.length === 0 && securitySchemeType !== 'TEST' ? (\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    <Box mb={1} alignItems='center'>\n                                        <Typography variant='body1'>\n                                            <Box display='flex'>\n                                                <WarningIcon className={classes.warningIcon} />\n                                                <div>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.ApiConsole.ApiConsole.subscribe.to.application'\n                                                        defaultMessage='Please subscribe to an application'\n                                                    />\n                                                </div>\n                                            </Box>\n                                        </Typography>\n                                    </Box>\n                                </Grid>\n                            ) : (\n                                !ksGenerated && (\n                                    <Grid x={8} md={6} className={classes.tokenType} item>\n                                        <Box mb={1} alignItems='center'>\n                                            <Typography variant='body1'>\n                                                <Box display='flex'>\n                                                    <WarningIcon className={classes.warningIcon} />\n                                                    <div>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.ApiConsole.ApiConsole.keys.not.generated'\n                                                            defaultMessage={'Consumer key and secret not generated for the selected'\n                                                            + ' application on the {what} environment. '}\n                                                            values={{ what: selectedKeyType }}\n                                                        />\n                                                    </div>\n                                                </Box>\n                                            </Typography>\n                                        </Box>\n                                    </Grid>\n                                )\n                            )}\n                            <Box display='block' justifyContent='center'>\n                                <Grid x={8} md={6} className={classes.tokenType} item>\n                                    {securitySchemeType === 'BASIC' && (\n                                        <>\n                                            <Grid x={12} md={12} item>\n                                                <TextField\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='username'\n                                                            defaultMessage='Username'\n                                                        />\n                                                    )}\n                                                    name='username'\n                                                    onChange={handleChanges}\n                                                    value={username || ''}\n                                                    fullWidth\n                                                />\n                                                <TextField\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                    label={(\n                                                        <FormattedMessage\n                                                            id='password'\n                                                            defaultMessage='Password'\n                                                        />\n                                                    )}\n                                                    name='password'\n                                                    onChange={handleChanges}\n                                                    value={password || ''}\n                                                    fullWidth\n                                                />\n                                            </Grid>\n                                        </>\n                                    )}\n\n                                    {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                        <TextField\n                                            fullWidth\n                                            margin='normal'\n                                            variant='outlined'\n                                            label={(\n                                                <FormattedMessage\n                                                    id='access.token'\n                                                    sdefaultMessage='Access Token'\n                                                />\n                                            )}\n                                            name='accessToken'\n                                            onChange={handleChanges}\n                                            type={showToken ? 'text' : 'password'}\n                                            value={tokenValue || ''}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    id='enter.access.token'\n                                                    defaultMessage='Enter access Token'\n                                                />\n                                            )}\n                                            id='accessTokenInput'\n                                            InputProps={{\n                                                endAdornment: (\n                                                    <InputAdornment position='end'>\n                                                        <IconButton\n                                                            edge='end'\n                                                            aria-label='Toggle token visibility'\n                                                            onClick={handleClickShowToken}\n                                                        >\n                                                            {showToken ? <Icon>visibility_off</Icon>\n                                                                : <Icon>visibility</Icon>}\n                                                        </IconButton>\n                                                    </InputAdornment>\n                                                ),\n                                                startAdornment: (\n                                                    <InputAdornment\n                                                        style={{\n                                                            minWidth: (authHeader.length * 7),\n                                                        }}\n                                                        position='start'\n                                                    >\n                                                        {`${authorizationHeader}: ${prefix}`}\n                                                    </InputAdornment>\n                                                ),\n                                            }}\n                                        />\n                                    )}\n                                    {securitySchemeType !== 'BASIC' && securitySchemeType !== 'TEST' && (\n                                        <>\n                                            <Button\n                                                onClick={securitySchemeType === 'API-KEY' ? generateApiKey\n                                                    : generateAccessToken}\n                                                variant='contained'\n                                                className={classes.genKeyButton}\n                                                disabled={!user || (subscriptions && subscriptions.length === 0) || !ksGenerated}\n                                            >\n                                                {isUpdating && (\n                                                    <CircularProgress size={15} />\n                                                )}\n                                                <FormattedMessage\n                                                    id='Apis.Details.ApiCOnsole.generate.test.key'\n                                                    defaultMessage='GET TEST KEY '\n                                                />\n                                            </Button>\n                                            <Tooltip\n                                                placement='right'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.TryOutConsole.access.token.tooltip'\n                                                        defaultMessage={\n                                                            'You can use your existing Access Token or '\n                                                            + 'you can generate a new Test Key.'\n                                                        }\n                                                    />\n                                                )}\n                                            >\n                                                <Box m={1} mt={2}>\n                                                    <IconButton\n                                                        aria-label='Use existing Access Token or generate a new Test Key'\n                                                    >\n                                                        <HelpOutline />\n                                                    </IconButton>\n                                                </Box>\n                                            </Tooltip>\n                                        </>\n                                    )}\n                                </Grid>\n                            </Box>\n                            <Box display='flex' justifyContent='center' className={classes.gatewayEnvironment}>\n                                <Grid xs={12} md={6} item>\n                                    {((environments && environments.length > 0) || (containerMngEnvMenuItems.length > 0)\n                                        || (labels && labels.length > 0))\n                                        && (\n                                            <>\n                                                <Typography\n                                                    variant='h5'\n                                                    color='textPrimary'\n                                                    className={classes.categoryHeading}\n                                                >\n                                                    <FormattedMessage\n                                                        id='api.console.gateway.heading'\n                                                        defaultMessage='Gateway'\n                                                    />\n                                                </Typography>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    label={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Environment'\n                                                            id='Apis.Details.ApiConsole.environment'\n                                                        />\n                                                    )}\n                                                    value={selectedEnvironment || (environments && environments[0])}\n                                                    name='selectedEnvironment'\n                                                    onChange={handleChanges}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            defaultMessage='Please select an environment'\n                                                            id='Apis.Details.ApiConsole.SelectAppPanel.environment'\n                                                        />\n                                                    )}\n                                                    margin='normal'\n                                                    variant='outlined'\n                                                >\n                                                    {environments && environments.length > 0 && (\n                                                        <MenuItem value='' disabled className={classes.menuItem}>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='api.gateways'\n                                                                    defaultMessage='API Gateways'\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {environments && (\n                                                        environments.map((env) => (\n                                                            <MenuItem\n                                                                value={env}\n                                                                key={env}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {env}\n                                                            </MenuItem>\n                                                        )))}\n                                                    {containerMngEnvMenuItems}\n                                                    {labels && labels.length > 0 && (\n                                                        <MenuItem value='' disabled>\n                                                            <em>\n                                                                <FormattedMessage\n                                                                    id='gateways'\n                                                                    defaultMessage='Gateways'\n                                                                    className={classes.menuItem}\n                                                                />\n                                                            </em>\n                                                        </MenuItem>\n                                                    )}\n                                                    {labels && (\n                                                        labels.map((label) => (\n                                                            <MenuItem\n                                                                value={label}\n                                                                key={label}\n                                                                className={classes.menuItem}\n                                                            >\n                                                                {label}\n                                                            </MenuItem>\n                                                        ))\n                                                    )}\n                                                </TextField>\n                                            </>\n                                        )}\n                                </Grid>\n                            </Box>\n                        </Box>\n                    </Grid>\n                )}\n        </IntlProvider>\n    );\n}\n\nTryOutController.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        inputAdornmentStart: PropTypes.string.isRequired,\n        centerItems: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(makeStyles)(TryOutController);\n"],"sourceRoot":""}