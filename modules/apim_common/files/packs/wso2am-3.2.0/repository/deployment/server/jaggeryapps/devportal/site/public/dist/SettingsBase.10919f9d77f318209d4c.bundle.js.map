{"version":3,"sources":["webpack:///./node_modules/base64url/index.js","webpack:///./node_modules/base64url/dist/base64url.js","webpack:///./node_modules/base64url/dist/pad-string.js","webpack:///./source/src/app/components/Settings/Alerts/AlertConfiguration.jsx","webpack:///./source/src/app/components/Settings/Alerts/Alerts.jsx","webpack:///./source/src/app/components/Settings/Settings.jsx","webpack:///./source/src/app/components/Settings/SettingsBase.jsx","webpack:///./source/src/app/components/Shared/InlineMessage.jsx"],"names":["module","exports","default","Object","defineProperty","value","pad_string_1","encode","input","encoding","Buffer","isBuffer","fromBase64","toString","from","toBase64","base64url","replace","base64","decode","toBuffer","stringLength","length","diff","position","padLength","paddedStringLength","buffer","alloc","write","alertPropertyMap","AbnormalRequestsPerMin","AlertConfiguration","props","alertType","api","alertName","classes","intl","setIsWorkerNodeDown","alertConfiguration","setAlertConfiguration","useState","apis","setApis","selectedAPIName","setSelectedAPIName","apiNames","setAPINames","Set","apiVersions","setAPIVersions","applications","setApplications","selectedAPIVersion","setSelectedAPIVersion","setValue","isProcessing","setProcessing","collapseOpen","setCollapseOpen","selectedApplicationName","setSelectedApplicationName","useEffect","alertConfigPromise","getAlertConfigurations","apisPromise","getAllAPIs","Promise","all","then","response","apisList","body","list","apiNamesSet","forEach","tmpApi","add","name","catch","err","console","log","getAlertConfig","action","finally","Fragment","Button","onClick","color","Typography","className","addBtn","Icon","id","defaultMessage","Collapse","in","configWrapper","Grid","container","spacing","item","xs","TextField","select","fullWidth","required","label","textField","onChange","event","availableVersions","filter","handleAPINameSelect","target","SelectProps","MenuProps","menu","helperText","variant","Array","map","MenuItem","key","version","existingAPI","tmpAPi","getSubscriptions","res","subscribedApps","subscription","applicationInfo","handleApiVersionSelect","selected","applicationId","type","endAdornment","InputAdornment","configAddBtnContainer","Fab","disabled","isAddingDissabled","size","configId","alertConfig","apiName","apiVersion","applicationName","requestCount","putAlertConfiguration","Alert","info","formatMessage","error","CircularProgress","configNameHeading","values","InlineMessage","height","contentWrapper","newConfig","Table","TableHead","TableRow","TableCell","TableBody","configuration","configurationId","IconButton","delete","deleteAlertConfiguration","handleDeleteConfiguration","propTypes","PropTypes","string","isRequired","shape","injectIntl","withStyles","theme","display","alignItems","paddingBottom","padding","marginBottom","borderBottom","Alerts","openDialog","setOpenDialog","open","emails","setEmailsList","supportedAlerts","setSupportedAlerts","subscribedAlerts","setSubscribedAlerts","isAnalyticsEnabled","setAnalyticsEnabled","isInProgress","setInProgress","subscribing","unSubscribing","unsubscribeAll","setUnsubscribeAll","isWorkerNodeDown","API","alertIdMapping","3","displayName","description","4","5","6","isAlertSubscribed","alertId","some","alert","handleCheckAlert","tmpSubscribedAlerts","sub","newAlert","push","requireConfiguration","selectedType","isAlertConfigured","supportedAlertsPromise","getSupportedAlertTypes","subscribedAlertsPromise","getSubscribedAlertTypesByUser","status","alerts","emailList","alertsWrapper","manageAlertHeading","List","ListItem","divider","ListItemIcon","Checkbox","edge","tabIndex","checked","inputProps","ListItemText","primary","secondary","listItem","ListItemSecondaryAction","setConfigOpen","chipInput","placeholder","chip","email","handleAddEmail","onDelete","newEmails","oldEmail","handleEmailDeletion","direction","btnContainer","alertsToSubscribe","subscribeAlerts","success","to","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","configDialogHeading","unsubscribeAlerts","func","palette","getContrastText","background","paper","width","marginTop","alertConfigDialog","fontWeight","marginLeft","Settings","settingsRoot","SettingsBase","Container","fixed","headingWrapper","root","paddingTop","paddingLeft","React","Component","this","setState","state","expanded","render","messgeType","elevation","iconItem","content","children","minHeight","borderRadius","border","fontSize","custom","paddingRight","button"],"mappings":"+EAAAA,EAAOC,QAAU,EAAQ,MAAoBC,QAC7CF,EAAOC,QAAQC,QAAUF,EAAOC,S,mCCDhC,YACAE,OAAOC,eAAeH,EAAS,aAAc,CAAEI,OAAO,IACtD,IAAIC,EAAe,EAAQ,MAC3B,SAASC,EAAOC,EAAOC,GAEnB,YADiB,IAAbA,IAAuBA,EAAW,QAClCC,EAAOC,SAASH,GACTI,EAAWJ,EAAMK,SAAS,WAE9BD,EAAWF,EAAOI,KAAKN,EAAOC,GAAUI,SAAS,WAO5D,SAASE,EAASC,GAEd,OADAA,EAAYA,EAAUH,WACfP,EAAaJ,QAAQc,GACvBC,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEvB,SAASL,EAAWM,GAChB,OAAOA,EACFD,QAAQ,KAAM,IACdA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KAKxB,IAAID,EAAYT,EAChBS,EAAUT,OAASA,EACnBS,EAAUG,OArBV,SAAgBH,EAAWP,GAEvB,YADiB,IAAbA,IAAuBA,EAAW,QAC/BC,EAAOI,KAAKC,EAASC,GAAY,UAAUH,SAASJ,IAoB/DO,EAAUD,SAAWA,EACrBC,EAAUJ,WAAaA,EACvBI,EAAUI,SARV,SAAkBJ,GACd,OAAON,EAAOI,KAAKC,EAASC,GAAY,WAQ5Cf,EAAQC,QAAUc,I,6DCpClB,YACAb,OAAOC,eAAeH,EAAS,aAAc,CAAEI,OAAO,IAkBtDJ,EAAQC,QAjBR,SAAmBM,GACf,IACIa,EAAeb,EAAMc,OACrBC,EAAOF,EAFS,EAGpB,IAAKE,EACD,OAAOf,EAEX,IAAIgB,EAAWH,EACXI,EAPgB,EAOYF,EAC5BG,EAAqBL,EAAeI,EACpCE,EAASjB,EAAOkB,MAAMF,GAE1B,IADAC,EAAOE,MAAMrB,GACNiB,KACHE,EAAOE,MAAM,IAAKL,KAEtB,OAAOG,EAAOd,c,4dC2BlB,MAAMiB,EAAmB,CACrBC,uBAAwB,gBA4BtBC,EAAsBC,IACxB,MAAM,UACFC,EADE,IAEFC,EAFE,UAGFC,EAHE,QAIFC,EAJE,KAKFC,EALE,oBAMFC,GACAN,GACGO,EAAoBC,GAAyBC,mBAAS,KACtDC,EAAMC,GAAWF,sBACjBG,EAAiBC,GAAsBJ,sBACvCK,EAAUC,GAAeN,mBAAS,IAAIO,MACtCC,EAAaC,GAAkBT,mBAAS,KACxCU,EAAcC,GAAmBX,mBAAS,KAC1CY,EAAoBC,GAAyBb,sBAC7CrC,EAAOmD,GAAYd,sBACnBe,EAAcC,GAAiBhB,mBAAS,KACxCiB,EAAcC,GAAmBlB,oBAAS,IAC1CmB,EAAyBC,GAA8BpB,qBAE9DqB,oBAAU,KACN,MAAMC,EAAqB7B,EAAI8B,uBAAuB/B,GAChDgC,EAAc/B,EAAIgC,aACxBC,QAAQC,IAAI,CAACL,EAAoBE,IAC5BI,KAAMC,IACH,MAAMC,EAAWD,EAAS,GAAGE,KAAKC,KAC5BC,EAAc,IAAI1B,IACxBuB,EAASI,QAASC,IACdF,EAAYG,IAAID,EAAOE,QAE3B/B,EAAY2B,GACZ/B,EAAQ4B,GACR/B,EAAsB8B,EAAS,GAAGE,QAErCO,MAAOC,IACJC,QAAQC,IAAIF,GACZ1C,GAAoB,MAE7B,IAOH,MAkCM6C,EAAkBC,IACpBlD,EAAI8B,uBAAuB/B,GAAWoC,KAAMC,IACxC9B,EAAsB8B,EAASE,QAChCO,QAAQM,QAAQ,KACf5B,EAAc,CAAE,CAAC2B,IAAS,OAgElC,OAAK1C,GAASH,EAIV,kBAAC,IAAM+C,SAAP,KACI,kBAAC,IAAMA,SAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,IAAM7B,GAAiBD,GAAe+B,MAAM,WACzD,kBAACC,EAAA,EAAD,CAAYC,UAAWvD,EAAQwD,QAC3B,kBAACC,EAAA,EAAD,CAAMJ,MAAM,WAAZ,OAGA,kBAAC,IAAD,CACIK,GAAG,wCACHC,eAAe,wBAI3B,kBAACC,EAAA,EAAD,CAAUC,GAAIvC,EAAciC,UAAWvD,EAAQ8D,eAC3C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIV,GAAG,2BACHW,QAAM,EACNC,WAAS,EACTC,UAAQ,EACRC,MAAO,kBAAC,IAAD,CACHd,GAAG,oDACHC,eAAe,aAEnBJ,UAAWvD,EAAQyE,UACnBzG,MAAOwC,EACPkE,SAAUC,GArITjC,KACzBjC,EAAmBiC,GACnB,MAAMkC,EAAoBtE,EAAKuE,OAAOrC,GAAUA,EAAOE,OAASA,GAChE5B,EAAe8D,IAkI4BE,CAAoBH,EAAMI,OAAO/G,OACpDgH,YAAa,CACTC,UAAW,CACP1B,UAAWvD,EAAQkF,OAG3BC,WACI,kBAAC,IAAD,CACIzB,GAAG,uDACHC,eAAe,wBAGvByB,QAAQ,YAEP1E,GAAY2E,MAAM5G,KAAKiC,GAAU4E,IAAK5C,GAE/B,kBAAC6C,EAAA,EAAD,CAAUC,IAAK9C,EAAM1E,MAAO0E,GACvBA,MAKrB,kBAACqB,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIV,GAAG,8BACHW,QAAM,EACNC,WAAS,EACTC,UAAQ,EACRC,MAAO,kBAAC,IAAD,CACHd,GAAG,uDACHC,eAAe,gBAEnBJ,UAAWvD,EAAQyE,UACnBzG,MAAOiD,EACPyD,SAAUC,GA5JNc,KAC5BvE,EAAsBuE,GACtB,MAAMC,EAAcpF,EAAKuE,OAAQc,GACtBA,EAAOjD,OAASlC,GAAmBmF,EAAOF,UAAYA,GAE7DC,EAAYzG,OAAS,GACrBa,EAAI8F,iBAAiBF,EAAY,GAAGhC,IAAIzB,KAAM4D,IAC1C,MAAMC,EAAiBD,EAAIzD,KAAKC,KAAKiD,IAAKS,GAC/BA,EAAaC,iBAExBhF,EAAgB8E,KACjBnD,MAAOC,IACNC,QAAQC,IAAIF,MAgJuBqD,CAAuBtB,EAAMI,OAAO/G,OACvDgH,YAAa,CACTC,UAAW,CACP1B,UAAWvD,EAAQkF,OAG3BC,WACI,kBAAC,IAAD,CACIzB,GAAG,2DACHC,eAAe,uBAGvByB,QAAQ,YAEPvE,GAAeA,EAAYyE,IAAKY,GAEzB,kBAACX,EAAA,EAAD,CAAUC,IAAKU,EAAST,QAASzH,MAAOkI,EAAST,SAC5CS,EAAST,YAM9B,kBAAC1B,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIV,GAAG,+BACHW,QAAM,EACNC,WAAS,EACTC,UAAQ,EACRC,MAAO,kBAAC,IAAD,CACHd,GAAG,wDACHC,eAAe,gBAEnBJ,UAAWvD,EAAQyE,UACnBzG,MAAOwD,EACPkD,SAAUC,GAASlD,EAA2BkD,EAAMI,OAAO/G,OAC3DgH,YAAa,CACTC,UAAW,CACP1B,UAAWvD,EAAQkF,OAG3BC,WACI,kBAAC,IAAD,CACIzB,GAAG,+DACHC,eAAe,uBAGvByB,QAAQ,YAEPrE,GAAgBA,EAAauE,IAAKU,GAE3B,kBAACT,EAAA,EAAD,CAAUC,IAAKQ,EAAgBG,cAAenI,MAAOgI,EAAgBtD,MAChEsD,EAAgBtD,SAMrC,kBAACqB,EAAA,EAAD,CAAMG,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CACIV,GAAG,iBACH0C,KAAK,SACL9B,WAAS,EACTC,UAAQ,EACRC,MAAO,kBAAC,IAAD,CACHd,GAAG,yDACHC,eAAe,mBAEnBJ,UAAWvD,EAAQyE,UACnBzG,MAAOA,EACP0G,SAAUC,GAASxD,EAASwD,EAAMI,OAAO/G,OACzCoH,QAAQ,WACRiB,aAAc,kBAACC,EAAA,EAAD,CAAgBnH,SAAS,OAAzB,MACdgG,WAAY,kBAAC,IAAD,CACRzB,GAAG,4DACHC,eAAe,4BAI3B,kBAACI,EAAA,EAAD,CAAMG,MAAI,EAACX,UAAWvD,EAAQuG,uBAC1B,kBAACC,EAAA,EAAD,CACIC,SAtJF,MACdjG,IAAoBS,IAAuBO,IAA4BxD,GAASoD,EAAaqB,IAqJnEiE,GACVrD,MAAM,UACNsD,KAAK,SACLvD,QA9MG,KAC3B/B,EAAc,CAAEoB,KAAK,IACrB,MAAMmE,EAAWjI,IAAUT,OAAOsC,EAAkB,IAAMS,EAAqB,IAAMO,GAC/EqF,EAAc,CAChBC,QAAStG,EACTuG,WAAY9F,EACZ+F,gBAAiBxF,EACjByF,aAAcjJ,GAElB8B,EAAIoH,sBAAsBrH,EAAWgH,EAAaD,GAC7C3E,KAAK,KACFkF,IAAMC,KAAKnH,EAAKoH,cAAc,CAC1B3D,GAAI,iEACJC,eAAgB,4CAEpBlD,EAAmB,IACnBS,EAAsB,IACtBO,EAA2B,IAC3BN,EAAS,MAEZwB,MAAM,KACHwE,IAAMG,MAAMrH,EAAKoH,cAAc,CAC3B3D,GAAI,+DACJC,eAAgB,uDAGvBV,QAAQ,KACLF,EAAe,WAqLC,kBAACU,EAAA,EAAD,KACKrC,EAAaqB,KAAO,kBAAC8E,EAAA,EAAD,CAAkBZ,KAAM,KADjD,YASpB,kBAAC,IAAMzD,SAAP,KACI,kBAACI,EAAA,EAAD,CAAYC,UAAWvD,EAAQwH,mBAC3B,kBAAC,IAAD,CACI9D,GAAG,mDACHC,eAAe,wBACf8D,OAAQ,CAAE/E,KAAM3C,MAGO,IAA9BI,EAAmBlB,OAChB,kBAACyI,EAAA,EAAD,CAAeC,OAAQ,IACnB,yBAAKpE,UAAWvD,EAAQ4H,gBACpB,kBAACtE,EAAA,EAAD,KACI,kBAAC,IAAD,CACII,GAAG,uDACHC,eAAgB,0FAEhB8D,OAAQ,CACJI,UAAW,sDAM/B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CACIvE,GAAG,8CACHC,eAAe,cAGvB,kBAACsE,EAAA,EAAD,KACI,kBAAC,IAAD,CACIvE,GAAG,iDACHC,eAAe,iBAGvB,kBAACsE,EAAA,EAAD,KACI,kBAAC,IAAD,CACIvE,GAAG,8CACHC,eAAe,sBAGvB,kBAACsE,EAAA,EAAD,KAAYlI,GACZ,kBAACkI,EAAA,EAAD,QAGR,kBAACC,EAAA,EAAD,KACK/H,EAAmBmF,IAAK6C,GAEjB,kBAACH,EAAA,EAAD,CAAUtE,GAAIyE,EAAcC,gBAAiB5C,IAAK2C,EAAcC,iBAC5D,kBAACH,EAAA,EAAD,KAAYE,EAAcA,cAAcrB,SACxC,kBAACmB,EAAA,EAAD,KAAYE,EAAcA,cAAcpB,YACxC,kBAACkB,EAAA,EAAD,KAAYE,EAAcA,cAAcnB,iBACxC,kBAACiB,EAAA,EAAD,KACKE,EAAcA,cAAc1I,EAAiBI,KAElD,kBAACoI,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CACIjF,QAAS,IAjPlBM,KAC/BrC,EAAc,CAAEiH,OAAQ5E,IACxB5D,EAAIyI,yBAAyB1I,EAAW6D,GAAIzB,KAAK,KAC7CkF,IAAMC,KAAKnH,EAAKoH,cAAc,CAC1B3D,GAAI,oEACJC,eAAgB,gDAErBhB,MAAM,KACLwE,IAAMG,MAAMrH,EAAKoH,cAAc,CAC3B3D,GAAI,kEACJC,eAAgB,wDAErBV,QAAQ,KACPF,EAAe,aAoOoCyF,CAA0BL,EAAcC,kBAEtDhH,EAAakH,SAAWH,EAAcC,gBACnC,kBAACb,EAAA,EAAD,CAAkBZ,KAAM,KACxB,kBAAClD,EAAA,EAAD,uBA/NrC,kBAAC8D,EAAA,EAAD,OAgPf5H,EAAmB8I,UAAY,CAC3B5I,UAAW6I,IAAUC,OAAOC,WAC5B7I,UAAW2I,IAAUC,OAAOC,WAC5B5I,QAAS0I,IAAUG,MAAM,IAAID,WAC7B9I,IAAK4I,IAAUG,MAAM,IAAID,WACzB3I,KAAMyI,IAAUG,MAAM,IAAID,YAGfE,kBAAWC,YAtaXC,IAAS,CACpBxF,OAAQ,CACJyF,QAAS,OACTC,WAAY,UAEhB3C,sBAAuB,CACnB0C,QAAS,OACTE,cAAeH,EAAM/E,QAAQ,IAEjCH,cAAe,CACXsF,QAASJ,EAAM/E,QAAQ,IAE3BuD,kBAAmB,CACf6B,aAAcL,EAAM/E,UACpBqF,aAAc,uBAwZIP,CAAmBpJ,ICra7C,MAmCM4J,EAAU3J,IACZ,MAAM,QACFI,EADE,KAEFC,GACAL,GACG4J,EAAYC,GAAiBpJ,mBAAS,CAAEqJ,MAAM,EAAO7J,UAAW,GAAI6C,KAAM,MAC1EiH,EAAQC,GAAiBvJ,mBAAS,KAClCwJ,EAAiBC,GAAsBzJ,sBACvC0J,EAAkBC,GAAuB3J,mBAAS,KAClD4J,EAAoBC,GAAuB7J,oBAAS,IACpD8J,EAAcC,GAAiB/J,mBAAS,CAAEgK,aAAa,EAAOC,eAAe,KAC7EC,EAAgBC,GAAqBnK,oBAAS,IAC9CoK,EAAkBvK,GAAuBG,oBAAS,GACnDP,EAAM,IAAI4K,IAEVC,EACF,CACIC,EAAG,CACClI,KAAMzC,EAAKoH,cAAc,CACrB3D,GAAI,gDACJC,eAAgB,iCAEpBkH,YAAa,yBACbC,YAAa7K,EAAKoH,cAAc,CAC5B3D,GAAI,8DACJC,eAAgB,iTAMxBoH,EAAG,CACCrI,KAAMzC,EAAKoH,cAAc,CACrB3D,GAAI,+CACJC,eAAgB,6BAEpBkH,YAAa,yBACbC,YAAa7K,EAAKoH,cAAc,CAC5B3D,GAAI,8DACJC,eAAgB,iOAKxBqH,EAAG,CACCtI,KAAMzC,EAAKoH,cAAc,CACrB3D,GAAI,qCACJC,eAAgB,sBAEpBkH,YAAa,kBACbC,YAAa7K,EAAKoH,cAAc,CAC5B3D,GAAI,uDACJC,eAAgB,gTAMxBsH,EAAG,CACCvI,KAAMzC,EAAKoH,cAAc,CACrB3D,GAAI,uCACJC,eAAgB,gCAEpBkH,YAAa,2BACbC,YAAa7K,EAAKoH,cAAc,CAC5B3D,GAAI,wDACJC,eAAgB,0aA2B1BuH,EAAqBC,GAChBpB,EAAiBqB,KAAMC,GAAmBA,EAAM3H,KAAOyH,GAsB5DG,EAAoBD,IACtB,MAAMF,EAAUE,EAAM3H,GACtB,IAAI6H,EAAsB,IAAIxB,GAC9B,GAAImB,EAAkBC,GAClBI,EAAsBA,EAAoB1G,OAAQ2G,GACvCA,EAAI9H,KAAOyH,OAEnB,CACH,MAAMM,EAAW,CAAE/H,GAAIyH,EAASzI,KAAMiI,EAAeQ,GAASN,YAAa1C,cAAe,IAC1FoD,EAAoBG,KAAKD,GAGzBJ,EAAMM,sBA1BaC,KACvB9L,EAAI8B,uBAAuBgK,EAAaf,aAAa5I,KAAM4D,IAEnC,IADPA,EAAIzD,KACRnD,QACLwK,EAAc,CAAEC,MAAM,EAAM7J,UAAW+L,EAAaf,YAAanI,KAAMkJ,EAAalJ,SAEzFC,MAAMC,GAAOC,QAAQC,IAAIF,KAqBxBiJ,CAAkBlB,EAAeQ,IAErCnB,EAAoBuB,IAwBxB7J,oBAAU,KACN,MAAMoK,EAAyBhM,EAAIiM,yBAC7BC,EAA0BlM,EAAImM,gCACpClK,QAAQC,IAAI,CAAC8J,EAAwBE,IAA0B/J,KAAMC,IACtC,MAAvBA,EAAS,GAAGgK,QAAyC,MAAvBhK,EAAS,GAAGgK,OAC1ChC,GAAoB,IAEpBA,GAAoB,GACpBF,EAAoB9H,EAAS,GAAGE,KAAK+J,QACrCvC,EAAc1H,EAAS,GAAGE,KAAKgK,WAC/BtC,EAAmB5H,EAAS,GAAGE,KAAK+J,WAEzCxJ,MAAOC,IACNsH,GAAoB,GACpBF,EAAoB,IACpBnH,QAAQyE,MAAM1E,GACduE,IAAMG,MAAMrH,EAAKoH,cAAc,CAC3B3D,GAAI,2CACJC,eAAgB,4CAGzB,IA6CH,OACI,kBAAC,IAAMT,SAAP,KACI,yBAAKK,UAAWvD,EAAQqM,eAClBpC,EAaE,kBAAC,IAAM/G,SAAP,KACM2G,EAEE,kBAAC,IAAM3G,SAAP,KACI,kBAACI,EAAA,EAAD,CAAY8B,QAAQ,KAAK7B,UAAWvD,EAAQsM,oBACxC,kBAAC,IAAD,CACI5I,GAAG,qDACHC,eAAe,gCAGvB,kBAACL,EAAA,EAAD,CAAY8B,QAAQ,WAChB,kBAAC,IAAD,CACI1B,GAAG,wDACHC,eAAgB,sEAIxB,kBAAC4I,EAAA,EAAD,KACK1C,GAAmBA,EAAgBvE,IAAK+F,GAEjC,kBAACmB,EAAA,EAAD,CAAUhH,IAAK6F,EAAM3H,GAAI+I,SAAO,GAC5B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLC,UAAW,EACX7O,MAAOqN,EAAM3H,GACboJ,QAAS5B,EAAkBG,EAAM3H,IACjCgB,SAAU,IAAM4G,EAAiBD,GACjC0B,WAAY,CAAE,kBAAmB1B,EAAM3I,MACvCW,MAAM,aAGd,kBAAC2J,EAAA,EAAD,CACItJ,GAAI2H,EAAM3H,GACVuJ,QAAStC,EAAeU,EAAM3H,IAAIhB,KAClCwK,UAAWvC,EAAeU,EAAM3H,IAAIoH,YACpCvH,UAAWvD,EAAQmN,YAES,IAA/B9B,EAAMM,qBACH,kBAACyB,EAAA,EAAD,KACI,kBAAC/E,EAAA,EAAD,CACIjF,QAAS,IAvM1CM,KACnB+F,EAAc,CACVC,MAAM,EACN7J,UAAW8K,EAAejH,GAAImH,YAC9BnI,KAAMiI,EAAejH,GAAIhB,QAmMsC2K,CAAchC,EAAM3H,KAEnC,kBAACD,EAAA,EAAD,mBAKR,iCAKpB,kBAAC,IAAD,CACIe,MAAM,SACNY,QAAQ,WACR7B,UAAWvD,EAAQsN,UACnBtP,MAAO2L,EACP4D,YAAY,sCACZhJ,UAAQ,EACRY,WAAY,qGAEZT,SAAW8I,IAhKnBC,KACpB7D,EAAc6D,IAgKkBC,CAAeF,IAEnBG,SAAWH,IA1JdC,KACzB,MAAMG,EAAYjE,EAAO9E,OAAQgJ,GACtBA,IAAaJ,GAExB7D,EAAcgE,IAuJkBE,CAAoBN,MAG5B,kBAACzJ,EAAA,EAAD,CAAMC,WAAS,EAAC+J,UAAU,MAAM9J,QAAS,EAAGV,UAAWvD,EAAQgO,cAC3D,kBAACjK,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACf,EAAA,EAAD,CACIsD,SAA4B,IAAlBkD,EAAO1K,QAA4C,IAA5B8K,EAAiB9K,OAClDmE,QAjIhB,KACpBgH,EAAc,CAAEC,aAAa,IAC7B,MAAM4D,EAAoB,CAAE9B,OAAQpC,EAAkBqC,UAAWzC,GACjE7J,EAAIoO,gBAAgBD,GAAmBhM,KAAK,KACxCkF,IAAMgH,QAAQlO,EAAKoH,cAAc,CAC7B3D,GAAI,+CACJC,eAAgB,0CAErBhB,MAAOC,IACNC,QAAQyE,MAAM1E,GACduE,IAAMG,MAAMrH,EAAKoH,cAAc,CAC3B3D,GAAI,6CACJC,eAAgB,mDAErBV,QAAQ,IAAMmH,EAAc,CAAEC,aAAa,MAoHVjF,QAAQ,YACR/B,MAAM,WAEL8G,EAAaE,aAAe,kBAAC9C,EAAA,EAAD,CAAkBZ,KAAM,KANzD,SAUJ,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACf,EAAA,EAAD,CACIsD,SAAU0D,EAAaE,YACvBhH,MAAM,UACN+B,QAAQ,YACRhC,QAAS,IAAMoH,GAAkB,IAEhCL,EAAaG,eAAiB,kBAAC/C,EAAA,EAAD,CAAkBZ,KAAM,KAN3D,oBAUJ,kBAAC5C,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,IAAD,CAAMkK,GAAG,UACL,kBAACjL,EAAA,EAAD,CACIsD,SAAU0D,EAAaE,YACvBjF,QAAQ,YACR/B,MAAM,WAEL8G,EAAaG,eAAiB,kBAAC/C,EAAA,EAAD,CAAkBZ,KAAM,KAL3D,cA5FhB,kBAACY,EAAA,EAAD,OAdR,kBAAC,IAAMrE,SAAP,KACI,kBAACwE,EAAA,EAAD,CAAetB,KAAK,OAAOuB,OAAQ,KAC/B,6BACI,kBAACrE,EAAA,EAAD,KACI,kBAAC,IAAD,CACII,GAAG,kDACHC,eAAe,8CAkH3C,kBAAC0K,EAAA,EAAD,CAAQ3E,KAAMF,EAAWE,MACrB,kBAAC4E,EAAA,EAAD,KACI,kBAAC,IAAD,CACI5K,GAAG,yCACHC,eAAe,oBAGtB8G,EACG,kBAAC8D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmB9K,GAAG,gCAClB,kBAAC,IAAD,CACIA,GAAG,wCACHC,eAAe,4EAK3B,kBAAC4K,EAAA,EAAD,KACI,kBAAC,EAAD,CACI1O,UAAW2J,EAAW3J,UACtBE,UAAWyJ,EAAW9G,KACtB5C,IAAKA,EACLI,oBAAqBA,KAGjC,kBAACuO,EAAA,EAAD,KACI,kBAACtL,EAAA,EAAD,CACIE,MAAM,UACN+B,QAAQ,WACRhC,QAAS,IAAMqG,EAAc,CAAEC,MAAM,KAErC,kBAACpG,EAAA,EAAD,KACI,kBAAC,IAAD,CAAkBI,GAAG,mCAAmCC,eAAe,cAKvF,kBAAC0K,EAAA,EAAD,CAAQ3E,KAAMa,GACV,kBAAC+D,EAAA,EAAD,KACI,kBAAChL,EAAA,EAAD,CAAYC,UAAWvD,EAAQ0O,qBAC3B,kBAAC,IAAD,CACIhL,GAAG,4DACHC,eAAe,6CAI3B,kBAAC4K,EAAA,EAAD,KACI,kBAACjL,EAAA,EAAD,KACI,kBAAC,IAAD,CACII,GAAG,4DACHC,eAAgB,sGAK5B,kBAAC8K,EAAA,EAAD,KACI,kBAACtL,EAAA,EAAD,CACIE,MAAM,UACNsD,KAAK,QACLvD,QAAS,KA1MzBgH,EAAc,CAAEE,eAAe,IAC/BxK,EAAI6O,oBAAoB1M,KAAK,KACzB+H,EAAoB,IACpBJ,EAAc,IACdzC,IAAMgH,QAAQlO,EAAKoH,cAAc,CAC7B3D,GAAI,iDACJC,eAAgB,kDAErBhB,MAAOC,IACNC,QAAQyE,MAAM1E,GACduE,IAAMG,MAAMrH,EAAKoH,cAAc,CAC3B3D,GAAI,+CACJC,eAAgB,2CAErBV,QAAQ,IAAMmH,EAAc,CAAEE,eAAe,KA8L5BE,GAAkB,KAGtB,kBAAClH,EAAA,EAAD,KACI,kBAAC,IAAD,CACII,GAAG,qCACHC,eAAe,sBAI3B,kBAACR,EAAA,EAAD,CACIE,MAAM,YACNsD,KAAK,QACLvD,QAAS,IAAMoH,GAAkB,IAEjC,kBAAClH,EAAA,EAAD,KACI,kBAAC,IAAD,CAAkBI,GAAG,oCAAoCC,eAAe,iBASpG4F,EAAOd,UAAY,CACfzI,QAAS0I,IAAUG,MAAM,CACrB6F,oBAAqBhG,IAAUC,OAAOC,WACtC0E,UAAW5E,IAAUC,OAAOC,WAC5BoF,aAActF,IAAUC,OAAOC,WAC/ByD,cAAe3D,IAAUC,OAAOC,WAChC0D,mBAAoB5D,IAAUC,OAAOC,aACtCA,WACH3I,KAAMyI,IAAUG,MAAM,CAClBxB,cAAeqB,IAAUkG,KAAKhG,aAC/BA,YAGQE,kBAAWC,YA/dXC,IAAS,CACpBqD,cAAe,CACXjD,QAASJ,EAAM/E,QAAQ,GACvB,6CAA8C,CAC1CZ,MAAO2F,EAAM6F,QAAQC,gBAAgB9F,EAAM6F,QAAQE,WAAWC,SAGtE1C,mBAAoB,CAChBjD,aAAcL,EAAM/E,WAExBqJ,UAAW,CACP2B,MAAO,OACPC,UAAWlG,EAAM/E,QAAQ,GACzBoF,aAAcL,EAAM/E,QAAQ,IAEhCkL,kBAAmB,CACfF,MAAO,OAEXP,oBAAqB,CACjBU,WAAY,OAEhBpB,aAAc,CACVkB,UAAWlG,EAAM/E,WAErBkJ,SAAU,CACNkC,WAAYrG,EAAM/E,QAAQ,MAscR8E,CAAmBQ,IC7e7C,SAAS+F,EAAS1P,GACd,MAAM,QAAEI,GAAYJ,EACpB,OACI,yBAAK2D,UAAWvD,EAAQuP,cACpB,kBAACxL,EAAA,EAAD,CAAMC,WAAS,EAAC+J,UAAU,SAAS9J,QAAS,GACxC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,EAAD,SAOpBoL,EAAS7G,UAAY,CACjBzI,QAAS0I,IAAUG,MAAM,CACrB0G,aAAc7G,IAAUC,OAAOC,aAChCA,YAGQG,kBA9BAC,IAAS,CACpBuG,aAAc,CACVnG,QAASJ,EAAM/E,UACfgL,MAAO,UA2BAlG,CAAmBuG,GCflC,SAASE,EAAa5P,GAClB,MAAM,QAAEI,GAAYJ,EACpB,OACI,kBAAC6P,EAAA,EAAD,CAAWC,OAAK,GACZ,yBAAKnM,UAAWvD,EAAQ2P,gBACpB,kBAACrM,EAAA,EAAD,CAAY8B,QAAQ,MAChB,kBAAC,IAAD,CACI1B,GAAG,oCACHC,eAAe,cAGvB,kBAACL,EAAA,EAAD,CAAY8B,QAAQ,WAChB,kBAAC,IAAD,CACI1B,GAAG,wCACHC,eAAe,mDAI3B,kBAAC,EAAD,OAKZ6L,EAAa/G,UAAY,CACrBzI,QAAS0I,IAAUG,MAAM,IAAID,YAGlBG,sBA1CAC,IAAS,CACpB4G,KAAM,CACFxG,QAASJ,EAAM/E,QAAQ,GACvBgL,MAAO,QAEXU,eAAgB,CACZE,WAAY7G,EAAM/E,QAAQ,GAC1BkF,cAAeH,EAAM/E,QAAQ,GAC7B6L,YAAa9G,EAAM/E,UACnB,6CAA8C,CAC1CZ,MAAO2F,EAAM6F,QAAQC,gBAAgB9F,EAAM6F,QAAQE,WAAWlR,aAgC3DkL,CAAmByG,I,qOCpBlC,MAAM9H,UAAsBqI,IAAMC,UAAU,iDAChC,CACJhS,MAAO,IAF6B,2BAKpB,KAChBiS,KAAKC,SAASC,IAAS,CAAGC,UAAWD,EAAMC,cAG/CC,SACI,MAAM,QAAErQ,EAAF,KAAWoG,GAAS6J,KAAKrQ,MACzB0Q,EAAalK,GAAQ,OAC3B,OACI,kBAAC,IAAD,CAAO7C,UAAWvD,EAAQ4P,KAAMW,UAAW,GACvB,SAAfD,GAAyB,kBAAC,IAAD,CAAM/M,UAAWvD,EAAQwQ,UAAzB,QACV,SAAfF,GAAyB,kBAAC,IAAD,CAAM/M,UAAWvD,EAAQwQ,UAAzB,WAC1B,kBAAC,IAAD,CAAiB7I,OAAQ,MACzB,yBAAKpE,UAAWvD,EAAQyQ,SAAUR,KAAKrQ,MAAM8Q,YAK7DhJ,EAAce,UAAY,CACtBzI,QAAS0I,IAAUG,MAAM,IAAID,WAC7BxC,KAAMsC,IAAUC,OAAOC,YAGZG,gBA9DAC,IAAS,CACpB4G,KAAM,CACF3G,QAAS,OACT0H,UAAW,IACXzH,WAAY,SACZ4G,YAAa9G,EAAM/E,QAAQ,GAC3B2M,aAAc5H,EAAMH,MAAM+H,aAC1BC,OAAQ,iBACR,wBAAyB,CACrBC,SAAU,GACVzN,MAAO2F,EAAM+H,OAAO3J,KAAK/D,OAE7B,iCAAkC,CAC9BA,MAAO2F,EAAM6F,QAAQC,gBAAgB9F,EAAM6F,QAAQE,WAAWC,SAGtEwB,SAAU,CACNQ,aAAchI,EAAM/E,QAAQ,GAC5B6M,SAAU,IAEdG,OAAQ,CACJ/B,UAAWlG,EAAM/E,QAAQ,GACzBoF,aAAcL,EAAM/E,QAAQ,IAEhCwM,QAAS,CACLZ,WAAY7G,EAAM/E,QAAQ,GAC1BkF,cAAeH,EAAM/E,QAAQ,MAoCtB8E,CAAmBrB","file":"SettingsBase.10919f9d77f318209d4c.bundle.js","sourcesContent":["module.exports = require('./dist/base64url').default;\nmodule.exports.default = module.exports;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction padString(input) {\n    var segmentLength = 4;\n    var stringLength = input.length;\n    var diff = stringLength % segmentLength;\n    if (!diff) {\n        return input;\n    }\n    var position = stringLength;\n    var padLength = segmentLength - diff;\n    var paddedStringLength = stringLength + padLength;\n    var buffer = Buffer.alloc(paddedStringLength);\n    buffer.write(input);\n    while (padLength--) {\n        buffer.write(\"=\", position++);\n    }\n    return buffer.toString();\n}\nexports.default = padString;\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    CircularProgress,\n    Collapse,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography,\n    withStyles,\n    InputAdornment,\n    Fab,\n} from '@material-ui/core';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport base64url from 'base64url';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst alertPropertyMap = {\n    AbnormalRequestsPerMin: 'requestCount',\n};\n\nconst styles = theme => ({\n    addBtn: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    configAddBtnContainer: {\n        display: 'flex',\n        paddingBottom: theme.spacing(2),\n    },\n    configWrapper: {\n        padding: theme.spacing(2),\n    },\n    configNameHeading: {\n        marginBottom: theme.spacing(),\n        borderBottom: '#cccccc 1px inset',\n    },\n});\n\n/**\n * Alert Configuration component.\n * This component is used to list add and delete the alert configurations.\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nconst AlertConfiguration = (props) => {\n    const {\n        alertType,\n        api,\n        alertName,\n        classes,\n        intl,\n        setIsWorkerNodeDown,\n    } = props;\n    const [alertConfiguration, setAlertConfiguration] = useState([]);\n    const [apis, setApis] = useState();\n    const [selectedAPIName, setSelectedAPIName] = useState();\n    const [apiNames, setAPINames] = useState(new Set());\n    const [apiVersions, setAPIVersions] = useState([]);\n    const [applications, setApplications] = useState([]);\n    const [selectedAPIVersion, setSelectedAPIVersion] = useState();\n    const [value, setValue] = useState();\n    const [isProcessing, setProcessing] = useState({});\n    const [collapseOpen, setCollapseOpen] = useState(false);\n    const [selectedApplicationName, setSelectedApplicationName] = useState();\n\n    useEffect(() => {\n        const alertConfigPromise = api.getAlertConfigurations(alertType);\n        const apisPromise = api.getAllAPIs();\n        Promise.all([alertConfigPromise, apisPromise])\n            .then((response) => {\n                const apisList = response[1].body.list;\n                const apiNamesSet = new Set();\n                apisList.forEach((tmpApi) => {\n                    apiNamesSet.add(tmpApi.name);\n                });\n                setAPINames(apiNamesSet);\n                setApis(apisList);\n                setAlertConfiguration(response[0].body);\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsWorkerNodeDown(true);\n            });\n    }, []);\n\n    /**\n     * Handles the API Name select event.\n     * Once the api name is selected, the api versions list is populated.\n     * @param {string} name The selected api name.\n     * */\n    const handleAPINameSelect = (name) => {\n        setSelectedAPIName(name);\n        const availableVersions = apis.filter(tmpApi => tmpApi.name === name);\n        setAPIVersions(availableVersions);\n    };\n\n    /**\n     * Handles the api version select event.\n     * In this method, get the subscriptions of the selected api+version and set to the state.\n     * @param {string} version The selected api version.\n     * */\n    const handleApiVersionSelect = (version) => {\n        setSelectedAPIVersion(version);\n        const existingAPI = apis.filter((tmpAPi) => {\n            return tmpAPi.name === selectedAPIName && tmpAPi.version === version;\n        });\n        if (existingAPI.length > 0) {\n            api.getSubscriptions(existingAPI[0].id).then((res) => {\n                const subscribedApps = res.body.list.map((subscription) => {\n                    return subscription.applicationInfo;\n                });\n                setApplications(subscribedApps);\n            }).catch((err) => {\n                console.log(err);\n            });\n        }\n    };\n\n    /**\n     * Get the alert configuration of the alert type.\n     * This method is called after a configuration addition or deletion.\n     *\n     * @param {string} action The action that is being performed.\n     * */\n    const getAlertConfig = (action) => {\n        api.getAlertConfigurations(alertType).then((response) => {\n            setAlertConfiguration(response.body);\n        }).catch().finally(() => {\n            setProcessing({ [action]: false });\n        });\n    };\n\n    /**\n     * Handles the configuration add operation.\n     * */\n    const handleAddConfiguration = () => {\n        setProcessing({ add: true });\n        const configId = base64url.encode(selectedAPIName + '#' + selectedAPIVersion + '#' + selectedApplicationName);\n        const alertConfig = {\n            apiName: selectedAPIName,\n            apiVersion: selectedAPIVersion,\n            applicationName: selectedApplicationName,\n            requestCount: value,\n        };\n        api.putAlertConfiguration(alertType, alertConfig, configId)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.success.msg',\n                    defaultMessage: 'Alert Configuration added successfully',\n                }));\n                setSelectedAPIName('');\n                setSelectedAPIVersion('');\n                setSelectedApplicationName('');\n                setValue('');\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    id: 'Settings.Alert.AlertConfiguration.alert.config.add.error.msg',\n                    defaultMessage: 'Error occurred while adding alert configuration',\n                }));\n            })\n            .finally(() => {\n                getAlertConfig('add');\n            });\n    };\n\n    /**\n     * Handles the configuration delet operation for a selected configuration.\n     *\n     * @param {strng} id The configuration id.\n     * */\n    const handleDeleteConfiguration = (id) => {\n        setProcessing({ delete: id });\n        api.deleteAlertConfiguration(alertType, id).then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.success.msg',\n                defaultMessage: 'Alert Configuration deleted successfully',\n            }));\n        }).catch(() => {\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alert.AlertConfiguration.alert.config.delete.error.msg',\n                defaultMessage: 'Error occurred while deleting the configuration.',\n            }));\n        }).finally(() => {\n            getAlertConfig('delete');\n        });\n    };\n\n    const isAddingDissabled = () => {\n        return !selectedAPIName || !selectedAPIVersion || !selectedApplicationName || !value || isProcessing.add;\n    };\n\n    if (!apis || !alertConfiguration) {\n        return <CircularProgress />;\n    }\n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <Button onClick={() => setCollapseOpen(!collapseOpen)} color='primary'>\n                    <Typography className={classes.addBtn}>\n                        <Icon color='primary'>\n                            add\n                        </Icon>\n                        <FormattedMessage\n                            id='Settings.Alert.AlertConfiguration.add'\n                            defaultMessage='New Configuration'\n                        />\n                    </Typography>\n                </Button>\n                <Collapse in={collapseOpen} className={classes.configWrapper}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-api-name'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.api.name.label'\n                                    defaultMessage='API Name'\n                                />}\n                                className={classes.textField}\n                                value={selectedAPIName}\n                                onChange={event => handleAPINameSelect(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.api.helper'\n                                        defaultMessage='Select the API Name'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {apiNames && Array.from(apiNames).map((name) => {\n                                    return (\n                                        <MenuItem key={name} value={name}>\n                                            {name}\n                                        </MenuItem>);\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-api-version'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.api.version.label'\n                                    defaultMessage='API Version'\n                                />}\n                                className={classes.textField}\n                                value={selectedAPIVersion}\n                                onChange={event => handleApiVersionSelect(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.version.helper'\n                                        defaultMessage='Select API Version'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {apiVersions && apiVersions.map((selected) => {\n                                    return (\n                                        <MenuItem key={selected.version} value={selected.version}>\n                                            {selected.version}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-select-applications'\n                                select\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.applications.label'\n                                    defaultMessage='Application'\n                                />}\n                                className={classes.textField}\n                                value={selectedApplicationName}\n                                onChange={event => setSelectedApplicationName(event.target.value)}\n                                SelectProps={{\n                                    MenuProps: {\n                                        className: classes.menu,\n                                    },\n                                }}\n                                helperText={\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.select.application.helper'\n                                        defaultMessage='Select Application'\n                                    />\n                                }\n                                variant='outlined'\n                            >\n                                {applications && applications.map((applicationInfo) => {\n                                    return (\n                                        <MenuItem key={applicationInfo.applicationId} value={applicationInfo.name}>\n                                            {applicationInfo.name}\n                                        </MenuItem>\n                                    );\n                                })}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                id='outlined-value'\n                                type='number'\n                                fullWidth\n                                required\n                                label={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.request.count.label'\n                                    defaultMessage='Request Count.'\n                                />}\n                                className={classes.textField}\n                                value={value}\n                                onChange={event => setValue(event.target.value)}\n                                variant='outlined'\n                                endAdornment={<InputAdornment position='end'>ms</InputAdornment>}\n                                helperText={<FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.threshold.value.helper'\n                                    defaultMessage='Enter Request Count.'\n                                />}\n                            />\n                        </Grid>\n                        <Grid item className={classes.configAddBtnContainer}>\n                            <Fab\n                                disabled={isAddingDissabled()}\n                                color='primary'\n                                size='medium'\n                                onClick={handleAddConfiguration}\n                            >\n                                <Icon>\n                                    {isProcessing.add && <CircularProgress size={15} />}\n                                    add\n                                </Icon>\n                            </Fab>\n                        </Grid>\n                    </Grid>\n                </Collapse>\n            </React.Fragment>\n            <React.Fragment>\n                <Typography className={classes.configNameHeading}>\n                    <FormattedMessage\n                        id='Settings.Alerts.AlertConfiguration.configuration'\n                        defaultMessage='{name} Configurations'\n                        values={{ name: alertName }}\n                    />\n                </Typography>\n                {alertConfiguration.length === 0 ? (\n                    <InlineMessage height={80}>\n                        <div className={classes.contentWrapper}>\n                            <Typography>\n                                <FormattedMessage\n                                    id='Settings.Alerts.AlertConfiguration.no.config.message'\n                                    defaultMessage={'You do not have any configurations. Click on {newConfig} button' +\n                                    ' to add a configuration.'}\n                                    values={{\n                                        newConfig: <b>New Configuration</b>,\n                                    }}\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>) :\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.api.name'\n                                        defaultMessage='API Name'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.api.version'\n                                        defaultMessage='API Version'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.AlertConfiguration.app.name'\n                                        defaultMessage='Application Name'\n                                    />\n                                </TableCell>\n                                <TableCell>{alertName}</TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {alertConfiguration.map((configuration) => {\n                                return (\n                                    <TableRow id={configuration.configurationId} key={configuration.configurationId}>\n                                        <TableCell>{configuration.configuration.apiName}</TableCell>\n                                        <TableCell>{configuration.configuration.apiVersion}</TableCell>\n                                        <TableCell>{configuration.configuration.applicationName}</TableCell>\n                                        <TableCell>\n                                            {configuration.configuration[alertPropertyMap[alertType]]}\n                                        </TableCell>\n                                        <TableCell>\n                                            <IconButton\n                                                onClick={() => handleDeleteConfiguration(configuration.configurationId)}\n                                            >\n                                                {isProcessing.delete === configuration.configurationId ?\n                                                    <CircularProgress size={15} /> :\n                                                    <Icon>\n                                                        delete\n                                                    </Icon>\n                                                }\n                                            </IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                }\n            </React.Fragment>\n        </React.Fragment>\n    );\n};\n\nAlertConfiguration.propTypes = {\n    alertType: PropTypes.string.isRequired,\n    alertName: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AlertConfiguration));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport {\n    Paper,\n    ListItem,\n    Checkbox,\n    ListItemText,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    IconButton,\n    Icon,\n    withStyles,\n    Typography,\n    List,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Button,\n    DialogActions,\n    CircularProgress,\n    DialogContentText,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport ChipInput from 'material-ui-chip-input';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AlertConfiguration from './AlertConfiguration';\n\n\nconst styles = theme => ({\n    alertsWrapper: {\n        padding: theme.spacing(2),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    manageAlertHeading: {\n        marginBottom: theme.spacing(),\n    },\n    chipInput: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    alertConfigDialog: {\n        width: '60%',\n    },\n    configDialogHeading: {\n        fontWeight: '600',\n    },\n    btnContainer: {\n        marginTop: theme.spacing(),\n    },\n    listItem: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n/**\n * Alerts management component.\n *\n * @param {any} props The Input props.\n * @return {any} HTML representation of the component.\n * */\nconst Alerts = (props) => {\n    const {\n        classes,\n        intl,\n    } = props;\n    const [openDialog, setOpenDialog] = useState({ open: false, alertType: '', name: '' });\n    const [emails, setEmailsList] = useState([]);\n    const [supportedAlerts, setSupportedAlerts] = useState();\n    const [subscribedAlerts, setSubscribedAlerts] = useState([]);\n    const [isAnalyticsEnabled, setAnalyticsEnabled] = useState(false);\n    const [isInProgress, setInProgress] = useState({ subscribing: false, unSubscribing: false });\n    const [unsubscribeAll, setUnsubscribeAll] = useState(false);\n    const [isWorkerNodeDown, setIsWorkerNodeDown] = useState(false);\n    const api = new API();\n\n    const alertIdMapping =\n        {\n            3: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.response.time',\n                    defaultMessage: 'Abnormal Requests per Minute',\n                }),\n                displayName: 'AbnormalRequestsPerMin',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.per.min.description',\n                    defaultMessage: 'This alert is triggered if there is a sudden spike the request count within a ' +\n                            'period of one minute by default for a particular API for an application. These alerts ' +\n                            'could be treated as an indication of a possible high traffic, suspicious activity, ' +\n                            'possible malfunction of the client application, etc.',\n                }),\n            },\n            4: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.backend.time',\n                    defaultMessage: 'Abnormal Resource Access',\n                }),\n                displayName: 'AbnormalRequestPattern',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.abnormal.request.pattern.description',\n                    defaultMessage: 'This alert is triggered if there is a change in the resource access pattern of ' +\n                        'a user of a particular application. These alerts could be treated as an indication of a ' +\n                        'suspicious activity by a user over your application.',\n                }),\n            },\n            5: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.numusual.ip',\n                    defaultMessage: 'Unusual IP Access',\n                }),\n                displayName: 'UnusualIPAccess',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.unusual.ip.access.description',\n                    defaultMessage: 'This alert is triggered if there is either a change in the request source IP ' +\n                        'for a particular application by a user or if the request is from an IP used before a ' +\n                        'time period of 30 days (default). These alerts could be treated as an indication of a ' +\n                        'suspicious activity by a user over an application.',\n                }),\n            },\n            6: {\n                name: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.frequent.tier',\n                    defaultMessage: 'Frequent Tier Limit Hitting',\n                }),\n                displayName: 'FrequentTierLimitHitting',\n                description: intl.formatMessage({\n                    id: 'Settings.Alerts.Alerts.tier.limit.hitting.description',\n                    defaultMessage: 'This alert is triggered if at least one of the two cases below are satisfied.' +\n                        ' If a particular application gets throttled out for hitting the subscribed tier limit of ' +\n                        'that application more than 10 times (by default) within an hour (by default) or if a ' +\n                        'particular user of an application gets throttled out for hitting the subscribed tier limit ' +\n                        'of a particular API more than 10 times (by default) within a day (by default)',\n                }),\n            },\n        };\n    /**\n     * Set the configuration dialog open property for provided alert type.\n     *\n     * @param {number} id The alert type id\n     * */\n    const setConfigOpen = (id) => {\n        setOpenDialog({\n            open: true,\n            alertType: alertIdMapping[id].displayName,\n            name: alertIdMapping[id].name,\n        });\n    };\n\n    /**\n     * Checks whether the provided alert is aubscribed.\n     *\n     * @param {number} alertId : The id of the alert.\n     * @return {boolean} True if the alert is subscribed. False otherwise.\n     * */\n    const isAlertSubscribed = (alertId) => {\n        return subscribedAlerts.some((alert) => { return alert.id === alertId; });\n    };\n\n    /**\n     * Check whether the provided alert is configured.\n     *\n     * @param {string} selectedType : The alert type which needs to be check.\n     * */\n    const isAlertConfigured = (selectedType) => {\n        api.getAlertConfigurations(selectedType.displayName).then((res) => {\n            const data = res.body;\n            if (data.length === 0) {\n                setOpenDialog({ open: true, alertType: selectedType.displayName, name: selectedType.name });\n            }\n        }).catch(err => console.log(err));\n    };\n\n    /**\n     * Handles the alert type select event.\n     *\n     * @param {obj} alert : The selected alert.\n     * */\n    const handleCheckAlert = (alert) => {\n        const alertId = alert.id;\n        let tmpSubscribedAlerts = [...subscribedAlerts];\n        if (isAlertSubscribed(alertId)) {\n            tmpSubscribedAlerts = tmpSubscribedAlerts.filter((sub) => {\n                return sub.id !== alertId;\n            });\n        } else {\n            const newAlert = { id: alertId, name: alertIdMapping[alertId].displayName, configuration: [] };\n            tmpSubscribedAlerts.push(newAlert);\n        }\n        // Check whether the alert is configurable and check configuration exists.\n        if (alert.requireConfiguration) {\n            isAlertConfigured(alertIdMapping[alertId]);\n        }\n        setSubscribedAlerts(tmpSubscribedAlerts);\n    };\n\n    /**\n     * Handles the add email event.\n     *\n     * @param {string} email The email address that is being added.\n     * */\n    const handleAddEmail = (email) => {\n        setEmailsList(email);\n    };\n\n    /**\n     * Handles the email deletion event.\n     *\n     * @param {string} email : The email that is being deleted.\n     * */\n    const handleEmailDeletion = (email) => {\n        const newEmails = emails.filter((oldEmail) => {\n            return oldEmail !== email;\n        });\n        setEmailsList(newEmails);\n    };\n\n    useEffect(() => {\n        const supportedAlertsPromise = api.getSupportedAlertTypes();\n        const subscribedAlertsPromise = api.getSubscribedAlertTypesByUser();\n        Promise.all([supportedAlertsPromise, subscribedAlertsPromise]).then((response) => {\n            if (response[0].status === 204 || response[1].status === 204) {\n                setAnalyticsEnabled(false);\n            } else {\n                setAnalyticsEnabled(true);\n                setSubscribedAlerts(response[1].body.alerts);\n                setEmailsList(response[1].body.emailList);\n                setSupportedAlerts(response[0].body.alerts);\n            }\n        }).catch((err) => {\n            setAnalyticsEnabled(false);\n            setSubscribedAlerts({});\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.loading.error.msg',\n                defaultMessage: 'Error occurred while loading alerts',\n            }));\n        });\n    }, []);\n\n    /**\n     * Handles the subscribe button click action.\n     * */\n    const handleSubscribe = () => {\n        setInProgress({ subscribing: true });\n        const alertsToSubscribe = { alerts: subscribedAlerts, emailList: emails };\n        api.subscribeAlerts(alertsToSubscribe).then(() => {\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.success.msg',\n                defaultMessage: 'Subscribed to Alerts Successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.subscribe.error.msg',\n                defaultMessage: 'Error occurred while subscribing to alerts.',\n            }));\n        }).finally(() => setInProgress({ subscribing: false }));\n    };\n\n    /**\n     * Handles unsubscribe button click action.\n     * */\n    const handleUnSubscribe = () => {\n        setInProgress({ unSubscribing: true });\n        api.unsubscribeAlerts().then(() => {\n            setSubscribedAlerts([]);\n            setEmailsList([]);\n            Alert.success(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.success.msg',\n                defaultMessage: 'Unsubscribed from all alerts successfully.',\n            }));\n        }).catch((err) => {\n            console.error(err);\n            Alert.error(intl.formatMessage({\n                id: 'Settings.Alerts.Alerts.unsubscribe.error.msg',\n                defaultMessage: 'Error occurred while unsubscribing.',\n            }));\n        }).finally(() => setInProgress({ unSubscribing: false }));\n    };\n    // if (!supportedAlerts) {\n    //     return <CircularProgress />;\n    // }\n    return (\n        <React.Fragment>\n            <div className={classes.alertsWrapper}>\n                {!isAnalyticsEnabled ?\n                    <React.Fragment>\n                        <InlineMessage type='info' height={100}>\n                            <div>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.enable.analytics.message'\n                                        defaultMessage='Enable Analytics to Configure Alerts'\n                                    />\n                                </Typography>\n                            </div>\n                        </InlineMessage>\n                    </React.Fragment> :\n                    <React.Fragment>\n                        {!supportedAlerts ?\n                            <CircularProgress /> :\n                            <React.Fragment>\n                                <Typography variant='h6' className={classes.manageAlertHeading}>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.heading'\n                                        defaultMessage='Manage Alert Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Settings.Alerts.Alerts.subscribe.to.alerts.subheading'\n                                        defaultMessage={'Select the Alert types to subscribe/ unsubscribe and click' +\n                                        ' Save.'}\n                                    />\n                                </Typography>\n                                <List>\n                                    {supportedAlerts && supportedAlerts.map((alert) => {\n                                        return (\n                                            <ListItem key={alert.id} divider>\n                                                <ListItemIcon>\n                                                    <Checkbox\n                                                        edge='start'\n                                                        tabIndex={-1}\n                                                        value={alert.id}\n                                                        checked={isAlertSubscribed(alert.id)}\n                                                        onChange={() => handleCheckAlert(alert)}\n                                                        inputProps={{ 'aria-labelledby': alert.name }}\n                                                        color='primary'\n                                                    />\n                                                </ListItemIcon>\n                                                <ListItemText\n                                                    id={alert.id}\n                                                    primary={alertIdMapping[alert.id].name}\n                                                    secondary={alertIdMapping[alert.id].description}\n                                                    className={classes.listItem}\n                                                />\n                                                {alert.requireConfiguration === true ?\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton\n                                                            onClick={() => setConfigOpen(alert.id)}\n                                                        >\n                                                            <Icon>\n                                                                settings\n                                                            </Icon>\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction> :\n                                                    <div />}\n                                            </ListItem>\n                                        );\n                                    })}\n                                </List>\n                                <ChipInput\n                                    label='Emails'\n                                    variant='outlined'\n                                    className={classes.chipInput}\n                                    value={emails}\n                                    placeholder='Enter email address and press Enter'\n                                    required\n                                    helperText={'Email address to receive alerts of selected Alert types. Type email' +\n                                    ' address and press Enter to add'}\n                                    onChange={(chip) => {\n                                        handleAddEmail(chip);\n                                    }}\n                                    onDelete={(chip) => {\n                                        handleEmailDeletion(chip);\n                                    }}\n                                />\n                                <Grid container direction='row' spacing={2} className={classes.btnContainer}>\n                                    <Grid item>\n                                        <Button\n                                            disabled={emails.length === 0 || subscribedAlerts.length === 0}\n                                            onClick={handleSubscribe}\n                                            variant='contained'\n                                            color='primary'\n                                        >\n                                            {isInProgress.subscribing && <CircularProgress size={15} />}\n                                            Save\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            disabled={isInProgress.subscribing}\n                                            color='primary'\n                                            variant='contained'\n                                            onClick={() => setUnsubscribeAll(true)}\n                                        >\n                                            {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                            Unsubscribe All\n                                        </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link to='/apis/'>\n                                            <Button\n                                                disabled={isInProgress.subscribing}\n                                                variant='contained'\n                                                color='default'\n                                            >\n                                                {isInProgress.unSubscribing && <CircularProgress size={15} />}\n                                                    Cancel\n                                            </Button>\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                            </React.Fragment>}\n                    </React.Fragment>}\n            </div>\n            <Dialog open={openDialog.open}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Settings.Alerts.Alerts.configure.alert'\n                        defaultMessage='Configurations'\n                    />\n                </DialogTitle>\n                {isWorkerNodeDown ? (\n                    <DialogContent>\n                        <DialogContentText id='analytics-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Settings.Alerts.connection.error'\n                                defaultMessage='Could not connect to analytics server. Please check the connectivity.'\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                ) : (\n                    <DialogContent>\n                        <AlertConfiguration\n                            alertType={openDialog.alertType}\n                            alertName={openDialog.name}\n                            api={api}\n                            setIsWorkerNodeDown={setIsWorkerNodeDown}\n                        />\n                    </DialogContent>)}\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        variant='outlined'\n                        onClick={() => setOpenDialog({ open: false })}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.close.btn' defaultMessage='Close' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={unsubscribeAll}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeading}>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.heading'\n                            defaultMessage='Confirm unsubscription from All Alerts'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Settings.Alerts.Alerts.unsubscribe.confirm.dialog.message'\n                            defaultMessage={'This will remove all the existing alert subscriptions and emails. This' +\n                            ' action cannot be undone.'}\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        color='primary'\n                        size='small'\n                        onClick={() => {\n                            handleUnSubscribe();\n                            setUnsubscribeAll(false);\n                        }}\n                    >\n                        <Typography>\n                            <FormattedMessage\n                                id='Settings.Alerts.Alerts.confirm.btn'\n                                defaultMessage='Unsubscribe All'\n                            />\n                        </Typography>\n                    </Button>\n                    <Button\n                        color='secondary'\n                        size='small'\n                        onClick={() => setUnsubscribeAll(false)}\n                    >\n                        <Typography>\n                            <FormattedMessage id='Settings.Alerts.Alerts.cancel.btn' defaultMessage='Cancel' />\n                        </Typography>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n};\n\nAlerts.propTypes = {\n    classes: PropTypes.shape({\n        configDialogHeading: PropTypes.string.isRequired,\n        chipInput: PropTypes.string.isRequired,\n        btnContainer: PropTypes.string.isRequired,\n        alertsWrapper: PropTypes.string.isRequired,\n        manageAlertHeading: PropTypes.string.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func.isRequired,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Alerts));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Alerts from './Alerts/Alerts';\n\n\nconst styles = theme => ({\n    settingsRoot: {\n        padding: theme.spacing(),\n        width: '100%',\n    },\n});\n\n/**\n * @param {any} props sdf\n * @return {any} dds\n * */\nfunction Settings(props) {\n    const { classes } = props;\n    return (\n        <div className={classes.settingsRoot}>\n            <Grid container direction='column' spacing={2}>\n                <Grid item>\n                    <Alerts />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    classes: PropTypes.shape({\n        settingsRoot: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Settings);\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { Typography, withStyles, Container } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Settings from './Settings';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n        width: '100%',\n    },\n    headingWrapper: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: theme.spacing(),\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n});\n\nfunction SettingsBase(props) {\n    const { classes } = props;\n    return (\n        <Container fixed>\n            <div className={classes.headingWrapper}>\n                <Typography variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.header'\n                        defaultMessage='Settings'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Settings.SettingsBase.sub.header'\n                        defaultMessage='View and Configure Developer Portal Settings'\n                    />\n                </Typography>\n            </div>\n            <Settings />\n        </Container>\n    );\n}\n\nSettingsBase.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(SettingsBase);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport VerticalDivider from './VerticalDivider';\n/**\n * Main style object\n *\n * @param {*} theme\n */\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        minHeight: 100,\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px #ddd',\n        '& span.material-icons': {\n            fontSize: 60,\n            color: theme.custom.info.color,\n        },\n        '& span, & h5, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconItem: {\n        paddingRight: theme.spacing(2),\n        fontSize: 60,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n});\n/**\n *  Renders a inline massage\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    state = {\n        value: 0,\n    };\n\n    handleExpandClick = () => {\n        this.setState(state => ({ expanded: !state.expanded }));\n    };\n\n    render() {\n        const { classes, type } = this.props;\n        const messgeType = type || 'info';\n        return (\n            <Paper className={classes.root} elevation={1}>\n                {messgeType === 'info' && <Icon className={classes.iconItem}>info</Icon>}\n                {messgeType === 'warn' && <Icon className={classes.iconItem}>warning</Icon>}\n                <VerticalDivider height={100} />\n                <div className={classes.content}>{this.props.children}</div>\n            </Paper>\n        );\n    }\n}\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(InlineMessage);\n"],"sourceRoot":""}